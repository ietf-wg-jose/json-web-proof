



jose                                                           J. Miller
Internet-Draft                                             Ping Identity
Intended status: Standards Track                                M. Jones
Expires: 8 February 2025                          Self-Issued Consulting
                                                                D. Waite
                                                           Ping Identity
                                                           7 August 2024


                         JSON Proof Algorithms
              draft-ietf-jose-json-proof-algorithms-latest

Abstract

   The JSON Proof Algorithms (JPA) specification registers cryptographic
   algorithms and identifiers to be used with the JSON Web Proof and
   JSON Web Key (JWK) specifications.  It defines IANA registries for
   these identifiers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 8 February 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Terminology
   4.  Background
   5.  Algorithm Basics
     5.1.  Issue
     5.2.  Confirm
     5.3.  Present
     5.4.  Verify
   6.  Algorithm Specifications
     6.1.  Single Use
       6.1.1.  JWS Algorithm
       6.1.2.  Holder Setup
       6.1.3.  Issuer Setup
       6.1.4.  Signing payloads
       6.1.5.  Issuer Protected Header
       6.1.6.  Payloads
       6.1.7.  Proof
       6.1.8.  Presentation Protected Header
       6.1.9.  Presentation
       6.1.10. Verification
       6.1.11. JPA Registration
     6.2.  BBS
       6.2.1.  JPA Algorithms
       6.2.2.  Key Format
       6.2.3.  Issuance
       6.2.4.  Issuance Proof Verification
       6.2.5.  Presentation
       6.2.6.  Presentation Verification
     6.3.  Message Authentication Code
       6.3.1.  Holder Setup
       6.3.2.  Issuer Setup
       6.3.3.  Issuer Protected Header
       6.3.4.  Combined MAC Representation
       6.3.5.  Issuer Proof
       6.3.6.  Presentation Protected Header
       6.3.7.  Presentation Proof
       6.3.8.  Verification of the Presentation Proof
       6.3.9.  JPA Registration
   7.  Security Considerations
   8.  IANA Considerations
     8.1.  JSON Web Proof Algorithms Registry
       8.1.1.  Registration Template
       8.1.2.  Initial Registry Contents
     8.2.  JSON Web Proof Header Parameters Registration
       8.2.1.  Registry Contents
         8.2.1.1.  Proof JWK Header Parameter
         8.2.1.2.  Presentation JWK Header Parameter
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Appendix A.  Example JWPs
     A.1.  Example Single-Use JWP
     A.2.  Example BBS JWP
     A.3.  Example MAC JWP
   Appendix B.  Acknowledgements
   Appendix C.  Document History
   Authors' Addresses

1.  Introduction

   The JSON Web Proof (JWP) [I-D.ietf-jose-json-web-proof] draft
   establishes a new secure container format that supports selective
   disclosure and unlinkability using Zero-Knowledge Proofs (ZKPs) or
   other cryptographic algorithms.

   |  Editor's Note: This draft is still early and incomplete.  There
   |  will be significant changes to the algorithms as currently defined
   |  here.  Please do not use any of these definitions or examples for
   |  anything except personal experimentation and learning.
   |  Contributions and feedback are welcomed at https://github.com/
   |  ietf-wg-jose/json-web-proof (https://github.com/ietf-wg-jose/json-
   |  web-proof).

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The roles of "issuer", "holder", and "verifier" are used as defined
   by the VC Data Model [VC-DATA-MODEL-2.0].  The term "presentation" is
   also used as defined by this source, but the term "credential" is
   avoided in this specification to minimize confusion with other
   definitions.

3.  Terminology

   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header
   Parameter", "JOSE Header", "JWS Payload", "JWS Signature", and "JWS
   Protected Header" are defined by [RFC7515].

   The terms "JSON Web Proof (JWP)", "JWP Payload", "JWP Proof", and
   "JWP Protected Header" are defined by [I-D.ietf-jose-json-web-proof].

   These terms are defined by this specification:

   Stable Key:  An asymmetric key-pair used by an issuer that is also
      shared via an out-of-band mechanism to a verifier to validate the
      signature.
   Ephemeral Key:  An asymmetric key-pair that is generated for one-time
      use by an issuer and never stored or used again outside of the
      creation of a single JWP.
   Presentation Key:  An asymmetric key-pair that is generated by a
      holder and used to ensure that a presentation is not able to be
      replayed by any other party.

4.  Background

   JWP defines a container binding together a protected header, one or
   more payloads, and a cryptographic proof.  It does not define any
   details about the interactions between an application and the
   cryptographic libraries that implement proof-supporting algorithms.

   Due to the nature of ZKPs, this specification also documents the
   subtle but important differences in proof algorithms versus those
   defined by the JSON Web Algorithms [RFC7518].  These differences help
   support more advanced capabilities such as blinded signatures and
   predicate proofs.

5.  Algorithm Basics

   The four principal interactions that every proof algorithm MUST
   support are [issue](#issue), [confirm](#confirm),
   [present](#present), and [verify](#verify).

5.1.  Issue

   The JWP is first created as the output of a JPA's issue operation.

   Every algorithm MUST support a JSON issuer protected header along
   with one or more octet string payloads.  The algorithm MAY support
   using additional items provided by the holder for issuance such as
   blinded payloads, keys for replay prevention, etc.

   All algorithms MUST provide integrity protection for the issuer
   header and all payloads and MUST specify all digest and/or hash2curve
   methods used.

5.2.  Confirm

   Performed by the holder to validate that the issued JWP is correctly
   formed and protected.

   Each algorithm MAY support using additional input items options, such
   as those sent to the issuer for issuance.  After confirmation, an
   algorithm MAY return a modified JWP for serialized storage without
   the local state (such as with blinded payloads now unblinded).

   The algorithm MUST fully verify the issued proof value against the
   issuer protected header and all payloads.  If given a presented JWP
   instead of an issued one, the confirm process MUST return an error.

5.3.  Present

   Used to apply any selective disclosure choices and perform any
   unlinkability transformations, as well as to show binding.

   An algorithm MAY support additional input options from the requesting
   party, such as for predicate proofs and verifiable computation
   requests.

   Every algorithm MUST support the ability to hide any or all payloads.
   It MUST always include the issuer protected header unmodified in the
   presentation.

   The algorithm MUST replace the issued proof value and generate a new
   presented proof value.  It also MUST include a new presentation
   protected header that provides replay protection.

5.4.  Verify

   Performed by the verifier to verify the protected headers along with
   any disclosed payloads and/or assertions about them from the proving
   party, while also verifying they are the same payloads and ordering
   as witnessed by the issuer.

   The algorithm MUST verify the integrity of all disclosed payloads and
   MUST also verify the integrity of both the issuer and presentation
   protected headers.

   If the presented proof contains any assertions about the hidden
   payloads, the algorithm MUST also verify all of those assertions.  It
   MAY support additional options, such as those sent to the holder to
   generate the presentation.

   If given an issued JWP for verification, the algorithm MUST return an
   error.

6.  Algorithm Specifications

   This section defines how to use specific algorithms for JWPs.

6.1.  Single Use

   The Single Use (SU) algorithm is based on composing multiple
   traditional asymmetric signatures into a single JWP proof.  It
   enables a very simple form of selective disclosure without requiring
   any advanced cryptographic techniques.

   It does not support unlinkability if the same JWP is presented
   multiple times, therefore when privacy is required the holder will
   need to interact with the issuer again to receive new single-use JWPs
   (dynamically or in batches).

6.1.1.  JWS Algorithm

   The Single Use algorithm is based on using multiple signatures to
   cover the individual payloads, all of which are generated with the
   same Asymmetric JSON Web Algorithm (JWA).  The internal signing
   algorithm to use is part of the registration for a new Single Use
   algorithm identifier.

   The chosen JWA MUST be an asymmetric signing algorithm so that each
   signature can be verified without sharing any private values between
   the parties.  This ensures that the verifier cannot brute force any
   non-disclosed payloads based only on their disclosed individual
   signatures.

6.1.2.  Holder Setup

   In order to support the protection of a presentation by a holder to a
   verifier, the holder MUST use a Presentation Key during the issuance
   and the presentation of every Single Use JWP.  This Presentation Key
   MUST be generated and used for only one JWP.

   The issuer MUST verify that the holder has possession of this key.
   The holder-issuer communication to exchange this information is out
   of scope of this specification, but can be accomplished by the holder
   using this key to generate a JWS that signs a value the issuer can
   verify as unique.

6.1.3.  Issuer Setup

   To create a Single Use JWP, the issuer first generates a unique
   Ephemeral Key using the selected internal algorithm.  This key-pair
   will be used to sign each of the payloads of a single JWP and then
   discarded.

6.1.4.  Signing payloads

   Each individual payload is signed using the selected internal
   algorithm using the Ephemeral Key.

6.1.5.  Issuer Protected Header

   The JWK of the issuer's Ephemeral Key MUST be included in the issuer
   protected header with the property name of proof_jwk and contain only
   the REQUIRED values to represent the public key.

   The holder's Presentation Key JWK MUST be included in issuer
   protected header using the presentation_jwk parameter.

   The issuer protected header is signed using the given JWA and the
   issuer's Stable Key.

6.1.6.  Payloads

   Each JWP payload is processed in order and signed using the given JWA
   using the issuer's Ephemeral Key.

6.1.7.  Proof

   The proof value is an octet string array.  The first entry is the
   octet string of the issuer protected header signature, with an
   additional entry for each payload signature.

6.1.8.  Presentation Protected Header

   To generate a new presentation, the holder first creates a
   presentation protected header that is specific to the verifier being
   presented to.  This header MUST contain a parameter that both the
   holder and verifier trust as being unique and non-replayable.  Use of
   the nonce header parameter is RECOMMENDED for this purpose.

   This specification registers the nonce header parameter for the
   presentation protected header that contains a string value either
   generated by the verifier or derived from values provided by the
   verifier.  When present, the verifier MUST ensure the nonce value
   matches during verification.

   The presentation protected header MAY contain other header parameters
   that are either provided by the verifier or by the holder.  These
   presentation header parameters SHOULD NOT contain values that are
   common across multiple presentations and SHOULD be unique to a single
   presentation and verifier.

6.1.9.  Presentation

   |  Editor's Note: The current definition here is incomplete, the
   |  holder's signature needs to also incorporate the presented proof.

   The holder derives a new proof as part of presentation.  The
   presented proof value will always contain the issuer's Stable Key
   signature for the issuer protected header as the first element.

   The second element of the presented proof is the holder's signature
   of the presentation protected header using the holder's presentation
   key.  This signature is constructed using the same algorithm
   described in generating the issuer's signature over the issuer
   protected header.  Signing only the presentation header with the
   Presentation Key is sufficient to protect the entire presentation
   since that key is private to the holder and only the contents of the
   presentation header are used for replay prevention.

   For each payload which is to be disclosed, the corresponding payload
   signature (from the issued JWP) is included in the proof.  If a
   payload is omitted from the presented JWP, the signature value will
   NOT be includeed, and the presentation proof will have one less part.

   For example, if the second and fifth of five payloads are not
   disclosed, then the holder's derived proof would consist of the
   issuer's signature over the issuer protected header, the holder's
   signature over the holder's protected header, the ephemeral key
   signature over the first, third and fourth payloads.

   Since the individual signatures in the proof value are unique and
   remain unchanged across multiple presentations, a Single Use JWP
   SHOULD only be presented a single time to each verifier in order for
   the holder to remain unlinkable across multiple presentations.

6.1.10.  Verification

   The verifier MUST verify the issuer protected header octets against
   the first part in the proof using the issuer's Stable Key. It MUST
   also verify the presentation protected header octets against the
   second part in the proof value using the holder's Presentation Key,
   as provided in the presentation_jwk claim in the issuer protected
   header.

   With the headers verified, the issuer's Ephemeral Key as given in the
   issuer protected header proof_jwk parameter can then be used to
   verify each of the disclosed payload signatures.

6.1.11.  JPA Registration

   The proposed JWP alg value is of the format "SU-" appended with the
   relevant JWS alg value for the chosen public and ephemeral key-pair
   algorithm, for example "SU-ES256".

6.2.  BBS

   The BBS Signature Scheme [I-D.irtf-cfrg-bbs-signatures] is under
   active development within the CRFG.

   This algorithm supports both selective disclosure and unlinkability,
   enabling the holder to generate multiple presentations from one
   issued JWP without a verifier being able to correlate those
   presentations together based on the proof.

6.2.1.  JPA Algorithms

   The BBS alg parameter value in the issuance protected header
   corresponds to a ciphersuite identifier of BBS_BLS12381G1_XMD:SHA-
   256_SSWU_RO_.

   The BBS-PROOF alg parameter value in the presentation protected
   header corresponds to the same ciphersuite, but used in presentation
   form.

6.2.2.  Key Format

   The key used for the BBS algorithm is an elliptic curve-based key
   pair, specifically against the G_2 subgroup of a pairing friendly
   curve.  Additional details on key generation can be found in
   Section 3.4

   The JWK form of this key is an OKP type with a curve of BLS12381G2,
   with x being the base64url-encoded form of the output of
   point_to_octets_E2.  The use of this curve is described in
   [I-D.ietf-cose-bls-key-representations].

   There is no additional holder key necessary for presentation proofs.

6.2.3.  Issuance

   Issuance is performed using the Sign operation from Section 3.5.1 of
   [I-D.irtf-cfrg-bbs-signatures].  This operation utilizes the issuer's
   BLS12-381 G2 key pair as SK and PK, along with desired protected
   header and payloads as the octets header and the octets array
   messages.

   The octets resulting from this operation form a single octet string
   in the issuance proof array, to be used along with the protected
   header and payloads to serialize the JWP.

6.2.4.  Issuance Proof Verification

   Holder verification of the signature on issuance form is performed
   using the Verify operation from Section 3.5.2 of
   [I-D.irtf-cfrg-bbs-signatures].

   This operation utilizes the issuer's public key as PK, the proof as
   signature, the protected header octets as header and the array of
   payload octets as messages.

6.2.5.  Presentation

   Derivation of a presentation is done by the holder using the ProofGen
   operation from Section 3.5.3 of [I-D.irtf-cfrg-bbs-signatures].

   This operation utilizes the issuer's public key as PK, the issuer
   protected header as header, the issuance proof as signature, the
   issuance payloads as messages, and the holder's presentation
   protected header as ph.

   The operation also takes a vector of indexes into messages,
   describing which payloads the holder wishes to disclose.  All
   payloads are required for proof generation, but only these indicated
   payloads will be required to be disclosed for later proof
   verification.

   The output of this operation is the presentation proof, as a single
   octet string.

   Presentation serialization leverages the two protected headers and
   presentation proof, along with the disclosed payloads.  Non-disclosed
   payloads are represented with the absent value of null in JSON
   serialization and a zero-length string in compact serialization.

6.2.6.  Presentation Verification

   Verification of a presentation is done by the verifier using the
   ProofVerify operation from Section 3.5.4.

   This operation utilizes the issuer's public key as PK, the issuer
   protected header as header, the issuance proof as signature, the
   holder's presentation protected header as ph, and the payloads as
   disclosed_messages.

   In addition, the disclosed_indexes scalar array is calculated from
   the payloads provided.  Values disclosed in the presented payloads
   have a zero-based index in this array, while the indices of absent
   payloads are omitted.

6.3.  Message Authentication Code

   The Message Authentication Code (MAC) JPA uses a MAC to both generate
   ephemeral keys and compute authentication codes to protect the issuer
   header and each payload individually.

   Like the the Single Use algorithm family, it also does not support
   unlinkability if the same JWP is presented multiple times. and
   requires an individually issued JWP for each presentation in order to
   fully protect privacy.  When compared to the JWS approach, using a
   MAC requires less computation but can result in potentially larger
   presentation proof values.

   The design is intentionally minimal and only involves using a single
   standardized MAC method instead of a mix of MAC/hash methods or a
   custom hash-based construct.  It is able to use any published
   cryptographic MAC method such as HMAC [RFC2104] or KMAC
   (https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
   NIST.SP.800-185.pdf).  It uses traditional public-key based
   signatures to verify the authenticity of the issuer and holder.

6.3.1.  Holder Setup

   Prior to the issuer creating a new JWP, it must have presentation
   binding information provided by the holder.  This enables the holder
   to perform replay prevention while presenting the JWP.

   The presentation key used by the holder must be transferred to the
   issuer and verified, likely through a challenge and self-signing
   mechanism.  If the holder requires unlinkability, it must also
   generate a new key that is verified and bound to each new JWP.

   How these holder presentation keys are transferred and verified is
   out of scope of this specification.  Protocols such as OpenID Connect
   can be used to accomplish this.  What is required by this definition
   is that the holder's presentation key MUST be included in the
   issuer's protected header using the pjwk parameter with a JWK as the
   value.

6.3.2.  Issuer Setup

   To use the MAC algorithm, the issuer must have a stable public key
   pair to perform signing.  To start the issuance process, a single
   32-byte random Shared Secret must first be generated.  This value
   will be shared privately to the holder as part of the issuer's JWP
   proof value.

   The Shared Secret is used by both the issuer and holder as the MAC
   method's key to generate a new set of unique ephemeral keys.  These
   keys are then used as the input to generate a MAC that protects each
   payload.

6.3.3.  Issuer Protected Header

   The holder's presentation key JWK MUST be included in the issuer
   protected header using the pjwk parameter.  The issuer MUST validate
   that the holder has possession of this key through a trusted
   mechanism such as verifying the signature of a unique nonce value
   from the holder.

6.3.4.  Combined MAC Representation

   The combined MAC representation is a single octet string representing
   the MAC values of the issuer protected header, along with each
   payload provided by the issuer.  This representation is signed by the
   issuer, but not shared - parties will recreate this octet string and
   verify the signature to verify the integrity of supplied issuer
   protected header and the integrity of any disclosed payloads.

   The issuer protected header is included in this value as a MAC
   created using the fixed key "issuer_header" in UTF-8 encoded octets.
   The value is the issuer header JSON as a UTF-8 encoded octet string.

   A unique key is generated for each payload using a MAC, with the
   Shared Secret as the key and a value of "payload_X" as UTF-8 encoded
   octets, where "X" is replaced by the zero-based array index of the
   payload, for example "payload_0", "payload_1", etc.

   Each payload then itself has a corresponding MAC, using the above
   per-payload key and the payload octet string.

   The combined MAC representation is the octet string formed by the the
   concatentation of the issuer protected header MAC output, along with
   each payload MAC output.

6.3.5.  Issuer Proof

   The issuer proof consists of two octet strings.

   The first octet string is the issuer signature over the combined MAC
   representation.  The issuer signs the JWS using its stable public
   key, and a fixed header containing the alg associated with signing
   algorithm in use.

   jws_header = '{"alg":"ES256"}'

   The signature value of the JWS is extracted and base64url-decoded
   into an octet string.

   The second octet string is the Shared Secret used to generate the
   per-payload keys for the combined representation.

6.3.6.  Presentation Protected Header

   See the JWS Presentation Protected Header (#presentation-protected-
   header) section.

6.3.7.  Presentation Proof

   |  Editor's Note: The current definition here is incomplete, the
   |  holder's signature needs to also incorporate the presented proof.

   The first value in the presentation proof is the presentation
   signature.  This is a signature over the presentation protected
   header, using the key specified by the pjwk parameter in the issuer
   protected header.

   The second value is the issuer signature over the Combined MAC
   Representation provided with the issued form.

   The remaining values are used by the verifier to reconstruct the
   combined MAC representation without access to the Shared Secret.
   There is one value corresponding to each payload, whether it has been
   disclosed or not.

   If a payload is disclosed, the unique per-payload key derived from
   the shared secret is used as the payload's entry in the proof array.

   If a payload is not disclosed, the payload's MAC in the combined MAC
   representation is used as the payload's entry in the proof array.

6.3.8.  Verification of the Presentation Proof

   The verifier must recreate the Combined MAC Representation from the
   presentation proof to verify integrity over the disclosed
   information.

   The issuer protected header MAC is recreated using the same mechanism
   described above.

   For each payload in the presentation:

   *  If the payload is disclosed, then the presentation proof contains
      the unique per-payload key.  The corresponding payload MAC can be
      computed by performing the MAC operation with this key and the
      corresponding payload.

   *  If the payload is not disclosed, then the presentation proof
      contains the payload MAC, which can be used directly

   The concatenation of the octets of the issuer protected header MAC
   and each payload MAC forms the Combined MAC Representation.  The
   issuer signature in the proof is then verified by converting these
   values to a JWS as described above, and verifying that JWS.

6.3.9.  JPA Registration

   Proposed JWP alg value is of the format "MAC-" appended with a unique
   identifier for the set of MAC and signing algorithms used.  Below are
   the initial registrations:

   *  MAC-H256 uses HMAC SHA-256 as the MAC and ECDSA using P-256 and
      SHA-256 for the signatures
   *  MAC-H384 uses HMAC SHA-384 as the MAC and ECDSA using P-384 and
      SHA-384 for the signatures
   *  MAC-H512 uses HMAC SHA-512 as the MAC and ECDSA using P-521 and
      SHA-512 for the signatures
   *  MAC-K25519 uses KMAC SHAKE128 as the MAC and EdDSA using
      Curve25519 for the signatures
   *  MAC-K448 uses KMAC SHAKE256 as the MAC and EdDSA using Curve448
      for the signatures
   *  MAC-H256K uses HMAC SHA-256 as the MAC and ECDSA using secp256k1
      and SHA-256 for the signatures

7.  Security Considerations

   |  Editor's Note: This will follow once the algorithms defined here
   |  have become more stable.

   *  Data minimization of the proof value
   *  Unlinkability of the protected header contents

8.  IANA Considerations

   The following registration procedure is used for all the registries
   established by this specification.

   Values are registered on a Specification Required [RFC5226] basis
   after a three-week review period on the jose-reg-review@ietf.org
   mailing list, on the advice of one or more Designated Experts.
   However, to allow for the allocation of values prior to publication,
   the Designated Experts may approve registration once they are
   satisfied that such a specification will be published.

   Registration requests sent to the mailing list for review should use
   an appropriate subject (e.g., "Request to register JWP algorithm:
   example").

   Within the review period, the Designated Experts will either approve
   or deny the registration request, communicating this decision to the
   review list and IANA.  Denials should include an explanation and, if
   applicable, suggestions as to how to make the request successful.
   Registration requests that are undetermined for a period longer than
   21 days can be brought to the IESG's attention (using the
   iesg@ietf.org mailing list) for resolution.

   Criteria that should be applied by the Designated Experts include
   determining whether the proposed registration duplicates existing
   functionality, whether it is likely to be of general applicability or
   useful only for a single application, and whether the registration
   description is clear.

   IANA must only accept registry updates from the Designated Experts
   and should direct all requests for registration to the review mailing
   list.

   It is suggested that multiple Designated Experts be appointed who are
   able to represent the perspectives of different applications using
   this specification, in order to enable broadly informed review of
   registration decisions.  In cases where a registration decision could
   be perceived as creating a conflict of interest for a particular
   Expert, that Expert should defer to the judgment of the other
   Experts.

8.1.  JSON Web Proof Algorithms Registry

   This specification establishes the IANA "JSON Web Proof Algorithms"
   registry for values of the JWP alg (algorithm) parameter in JWP
   Header Parameters.  The registry records the algorithm name, the
   algorithm description, the algorithm usage locations, the
   implementation requirements, the change controller, and a reference
   to the specification that defines it.  The same algorithm name can be
   registered multiple times, provided that the sets of usage locations
   are disjoint.

   It is suggested that the length of the key be included in the
   algorithm name when multiple variations of algorithms are being
   registered that use keys of different lengths and the key lengths for
   each need to be fixed (for instance, because they will be created by
   key derivation functions).  This allows readers of the JSON text to
   more easily make security decisions.

   The Designated Experts should perform reasonable due diligence that
   algorithms being registered either are currently considered
   cryptographically credible or are being registered as Deprecated or
   Prohibited.

   The implementation requirements of an algorithm may be changed over
   time as the cryptographic landscape evolves, for instance, to change
   the status of an algorithm to Deprecated or to change the status of
   an algorithm from Optional to Recommended+ or Required.  Changes of
   implementation requirements are only permitted on a Specification
   Required basis after review by the Designated Experts, with the new
   specification defining the revised implementation requirements level.

8.1.1.  Registration Template

   *  Algorithm Name: The name requested (e.g., "SU-ES256").  This name
      is a case-sensitive ASCII string.  Names may not match other
      registered names in a case-insensitive manner unless the
      Designated Experts state that there is a compelling reason to
      allow an exception.
   *  Algorithm Description: Brief description of the algorithm (e.g.,
      "Single-Use JWP using ES256").
   *  Algorithm Usage Location(s): The algorithm usage locations, which
      should be one or more of the values Issued or Presented.  Other
      values may be used with the approval of a Designated Expert.
   *  JWP Implementation Requirements: The algorithm implementation
      requirements for JWP, which must be one the words Required,
      Recommended, Optional, Deprecated, or Prohibited.  Optionally, the
      word can be followed by a "+" or "-".  The use of "+" indicates
      that the requirement strength is likely to be increased in a
      future version of the specification.  The use of "-" indicates
      that the requirement strength is likely to be decreased in a
      future version of the specification.  Any identifiers registered
      for non-authenticated encryption algorithms or other algorithms
      that are otherwise unsuitable for direct use as JWP algorithms
      must be registered as "Prohibited".
   *  Change Controller: For Standards Track RFCs, list the "IETF".  For
      others, give the name of the responsible party.  Other details
      (e.g., postal address, email address, home page URI) may also be
      included.
   *  Specification Document(s): Reference to the document or documents
      that specify the parameter, preferably including URIs that can be
      used to retrieve copies of the documents.  An indication of the
      relevant sections may also be included but is not required.
   *  Algorithm Analysis Documents(s): References to a publication or
      publications in well-known cryptographic conferences, by national
      standards bodies, or by other authoritative sources analyzing the
      cryptographic soundness of the algorithm to be registered.  The
      Designated Experts may require convincing evidence of the
      cryptographic soundness of a new algorithm to be provided with the
      registration request unless the algorithm is being registered as
      Deprecated or Prohibited.  Having gone through working group and
      IETF review, the initial registrations made by this document are
      exempt from the need to provide this information.

8.1.2.  Initial Registry Contents

   *  Algorithm Name: SU-ES256

   *  Algorithm Description: Single-Use JWP using ES256

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Recommended

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.11 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: SU-ES384

   *  Algorithm Description: Single-Use JWP using ES384

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.11 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: SU-ES512

   *  Algorithm Description: Single-Use JWP using ES512

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.11 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: BBS

   *  Algorithm Description: Corresponds to a ciphersuite identifier of
      BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_H2G_HM2S_

   *  Algorithm Usage Location(s): Issued

   *  JWP Implementation Requirements: Required

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.2.1 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: BBS-PROOF

   *  Algorithm Description: Corresponds to a ciphersuite identifier of
      BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_H2G_HM2S_

   *  Algorithm Usage Location(s): Presented

   *  JWP Implementation Requirements: Required

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.2.1 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H256

   *  Algorithm Description: MAC-H256 uses HMAC SHA-256 as the MAC and
      ECDSA using P-256 and SHA-256 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H384

   *  Algorithm Description: MAC-H384 uses HMAC SHA-384 as the MAC and
      ECDSA using P-384 and SHA-384 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H512

   *  Algorithm Description: MAC-H512 uses HMAC SHA-512 as the MAC and
      ECDSA using P-521 and SHA-512 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-K25519

   *  Algorithm Description: MAC-K25519 uses KMAC SHAKE128 as the MAC
      and EdDSA using Curve25519 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-K448

   *  Algorithm Description: MAC-K448 uses KMAC SHAKE256 as the MAC and
      EdDSA using Curve448 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H256K

   *  Algorithm Description: MAC-H256K uses HMAC SHA-256 as the MAC and
      ECDSA using secp256k1 and SHA-256 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

8.2.  JSON Web Proof Header Parameters Registration

   This section registers the following JWP Header Parameters in the
   IANA "JSON Web Proof Header Parameters" registry established by
   [I-D.ietf-jose-json-web-proof].

8.2.1.  Registry Contents

8.2.1.1.  Proof JWK Header Parameter

   *  Header Parameter Name: proof_jwk
   *  Header Parameter Description: Issuer's Ephemeral Key
   *  Header Parameter Usage Location(s): Issued
   *  Change Controller: IETF
   *  Specification Document(s): Section 6.1.5 of this specification

8.2.1.2.  Presentation JWK Header Parameter

   *  Header Parameter Name: presentation_jwk
   *  Header Parameter Description: Holder's Presentation Key
   *  Header Parameter Usage Location(s): Issued
   *  Change Controller: IETF
   *  Specification Document(s): Section 6.1.5 of this specification

9.  References

9.1.  Normative References

   [I-D.ietf-cose-bls-key-representations]
              Looker, T. and M. B. Jones, "Barreto-Lynn-Scott Elliptic
              Curve Key Representations for JOSE and COSE", Work in
              Progress, Internet-Draft, draft-ietf-cose-bls-key-
              representations-05, 17 March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-cose-
              bls-key-representations-05>.

   [I-D.ietf-jose-json-web-proof]
              Miller, J., Waite, D., and M. B. Jones, "JSON Web Proof",
              Work in Progress, Internet-Draft, draft-ietf-jose-json-
              web-proof-05, 22 July 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-jose-
              json-web-proof-05>.

   [I-D.irtf-cfrg-bbs-signatures]
              Looker, T., Kalos, V., Whitehead, A., and M. Lodder, "The
              BBS Signature Scheme", Work in Progress, Internet-Draft,
              draft-irtf-cfrg-bbs-signatures-06, 26 June 2024,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              bbs-signatures-06>.

9.2.  Informative References

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", RFC 2104,
              DOI 10.17487/RFC2104, February 1997,
              <https://www.rfc-editor.org/info/rfc2104>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518,
              DOI 10.17487/RFC7518, May 2015,
              <https://www.rfc-editor.org/info/rfc7518>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [VC-DATA-MODEL-2.0]
              Sporny, M., Jr, T. T., Herman, I., Jones, M. B., and G.
              Cohen, "Verifiable Credentials Data Model 2.0", 27
              December 2023, <https://www.w3.org/TR/vc-data-model-2.0>.

Appendix A.  Example JWPs

   The following examples use algorithms defined in JSON Proof
   Algorithms and also contain the keys used, so that implementations
   can validate these samples.

A.1.  Example Single-Use JWP

   This example uses the Single-Use Algorithm as defined in JSON Proof
   Algorithms to create a JSON Proof Token.  It demonstrates how to
   apply selective disclosure using an array of traditional JWS-based
   signatures.  Unlinkability is only achieved by using each JWP one
   time, as multiple uses are inherently linkable via the traditional
   ECDSA signature embedded in the proof.

   To begin, we need two asymmetric keys for Single Use: one that
   represents the JPT Issuer's stable key and the other is an ephemeral
   key generated by the Issuer just for this JWP.

   This is the Issuer's stable private key used in this example in the
   JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "soKXCv67OQw1CmHKzQWPUL6dmXWHqqfz8YLfaMcewAE",
     "y": "ppAH_JTpmDJ2b9qbKCtusEuGW2LPc9d0HMatNt57QYQ",
     "d": "0g-avGj6CbapHIIc0RoisPO2h3Q1TNH0Y5y4i17or88"
   }

                    Figure 1: Issuer Private Key (es256)

   This is the ephemeral private key used in this example in the JWK
   format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "HsTkthnCCH_UzogmO8LpVAU2VD5JhspQ375lvk-fWyk",
     "y": "IpFQx2Bjzn1xGdbyKO2SofuuSbdzpss5DzxS13Hg7Io",
     "d": "Y7m68AssNWvCGSuXyUwxiZ9KEFmS_wYh3Lm04Ia8en8"
   }

               Figure 2: Issuer Ephemeral Private Key (es256)

   This is the Holder's presentation private key used in this example in
   the JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "YGyooj4O9gTUWGHN3CSgFDUj3zoc9KIwmjwJjaTrQlY",
     "y": "N5fJQXowPDU1KTxdYycw7PdtW7IrQp4MB9rPKR1-BXc",
     "d": "B2FI-OOtyZL8cRkdaM8-7CEpzWquVPriKQWKFOSfc-g"
   }

                 Figure 3: Holder Presentation Private Key

   The JWP Protected Header declares that the data structure is a JPT
   and the JWP Proof Input is secured using the Single-Use ECDSA
   algorithm with the P-256 curve and SHA-256 digest.  It also includes
   the ephemeral public key, the Holder's presentation public key and
   list of claims used for this JPT.

   {
     "alg": "SU-ES256",
     "typ": "JPT",
     "iss": "https://issuer.example",
     "claims": [
       "iat",
       "exp",
       "family_name",
       "given_name",
       "email",
       "address",
       "age_over_21"
     ],
     "proof_jwk": {
       "kty": "EC",
       "crv": "P-256",
       "x": "HsTkthnCCH_UzogmO8LpVAU2VD5JhspQ375lvk-fWyk",
       "y": "IpFQx2Bjzn1xGdbyKO2SofuuSbdzpss5DzxS13Hg7Io",
       "d": "Y7m68AssNWvCGSuXyUwxiZ9KEFmS_wYh3Lm04Ia8en8"
     },
     "presentation_jwk": {
       "kty": "EC",
       "crv": "P-256",
       "x": "YGyooj4O9gTUWGHN3CSgFDUj3zoc9KIwmjwJjaTrQlY",
       "y": "N5fJQXowPDU1KTxdYycw7PdtW7IrQp4MB9rPKR1-BXc",
       "d": "B2FI-OOtyZL8cRkdaM8-7CEpzWquVPriKQWKFOSfc-g"
     }
   }

                 Figure 4: Issuer Protected header (es256)

   The JWP Protected Header JSON is serialized (without the above
   whitespace added for readability) and uses UTF-8 encoding to convert
   into an octet string.  This gives:

   eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8vaXNzdWVyL
   mV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUiLCJnaXZlbl
   9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb2ZfandrIjp
   7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiSHNUa3RobkNDSF9Vem9nbU84THBW
   QVUyVkQ1SmhzcFEzNzVsdmstZld5ayIsInkiOiJJcEZReDJCanpuMXhHZGJ5S08yU29md
   XVTYmR6cHNzNUR6eFMxM0hnN0lvIiwiZCI6Ilk3bTY4QXNzTld2Q0dTdVh5VXd4aVo5S0
   VGbVNfd1loM0xtMDRJYThlbjgifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyI
   sImNydiI6IlAtMjU2IiwieCI6IllHeW9vajRPOWdUVVdHSE4zQ1NnRkRVajN6b2M5S0l3
   bWp3SmphVHJRbFkiLCJ5IjoiTjVmSlFYb3dQRFUxS1R4ZFl5Y3c3UGR0VzdJclFwNE1CO
   XJQS1IxLUJYYyIsImQiOiJCMkZJLU9PdHlaTDhjUmtkYU04LTdDRXB6V3F1VlByaUtRV0
   tGT1NmYy1nIn19

    Figure 5: Encoded Issuer Protected Header (es256, base64url-encoded)

   The Single Use algorithm utilizes multiple individual JWS Signatures.
   Each signature value is generated by creating a JWS with a single
   Protected Header with the associated alg value.  In this example, the
   fixed header used for each JWS is the serialized JSON Object
   {"alg":"ES256"}. This protected header will be used to generate a
   signature over each corresponding payload in the JWP.  The
   corresponding octet value in the proof is the octet string
   (base64url-decoded) value of the signature.

   The final proof value from the Issuer is an array with the octets of
   the header signature, followed by entries for each payload signature.

   The resulting JSON serialized JPT using the above examples is:

   {
     "issuer": "eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
          Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaW
          x5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292
          ZXJfMjEiXSwicHJvb2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLC
          J4IjoiSHNUa3RobkNDSF9Vem9nbU84THBWQVUyVkQ1SmhzcFEzNzVsdmstZld5
          ayIsInkiOiJJcEZReDJCanpuMXhHZGJ5S08yU29mdXVTYmR6cHNzNUR6eFMxM0
          hnN0lvIiwiZCI6Ilk3bTY4QXNzTld2Q0dTdVh5VXd4aVo5S0VGbVNfd1loM0xt
          MDRJYThlbjgifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyIsImNydi
          I6IlAtMjU2IiwieCI6IllHeW9vajRPOWdUVVdHSE4zQ1NnRkRVajN6b2M5S0l3
          bWp3SmphVHJRbFkiLCJ5IjoiTjVmSlFYb3dQRFUxS1R4ZFl5Y3c3UGR0VzdJcl
          FwNE1COXJQS1IxLUJYYyIsImQiOiJCMkZJLU9PdHlaTDhjUmtkYU04LTdDRXB6
          V3F1VlByaUtRV0tGT1NmYy1nIn19",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ"
     ],
     "proof": [
       "nufXgYYdWYWQQXMpykwBlO3ssm_hWNIsMSnuBv_AYPyNA2wWemPg23qCnwO1zjG9
          ccAeFck9j3rh-kOE7h0hxg",
       "q-9dlw5BOdfd705qR7Dn5Aa3OzuJZrl3kw7SlkBxY6ervShdxAE4iXZNZU4byfgc
          CZTNCRxNBGwIE7ll23tLNQ",
       "LI_VL3Jx2uaiakPBLVXVxG8RInpcL9q1i1cgX7iSUZgGyVq0-4O3xKWcrix5LIzI
          fSMOmSY03pstwdQ2AUl_pA",
       "ORoRicjKIhRk0VaWvOsM79i0wpmGtpU3tLAIRZ3jtZGJRSrgZB00TnBC9kKHN7Vr
          pvsKitwXTv5dqvtGhy5IFw",
       "cSMKGhSDZ8R5noKoZXplnTE-9WMmQxaapG2vUDJSHf1VIMBTdYi-mhqK9hSov2FQ
          nhN27Cql7FGlnJ2728WQLw",
       "ASlb0UWQH9wZFEwX__Jo-1DqfS8RWaQpSPhRLlDkLNvukkS9HL3DkxVvKC6Ey2xf
          tQ0IbD7tb7U5czvEzSLl9g",
       "XMyQA87NGdmbJl8f2XR7eUwcL7FYFB5qiUe9Obv5h7z1EIhvTk9vD5Zr7POUgp6n
          DomhP5gmeHtjDqJkoqJliw",
       "rXhEMVY9edC6gEa7auFjZOPtF9eni9uRoYy-xmliNOKMADeGV0kegSZa23nCFE0o
          inhFM431Mj01hJF5PXX-KQ"
     ]
   }

             Figure 6: Issued JWP in JSON Serialization (es256)

   The compact serialization of the same JPT is:

   eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8vaXNzdWVyL
   mV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUiLCJnaXZlbl
   9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb2ZfandrIjp
   7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiSHNUa3RobkNDSF9Vem9nbU84THBW
   QVUyVkQ1SmhzcFEzNzVsdmstZld5ayIsInkiOiJJcEZReDJCanpuMXhHZGJ5S08yU29md
   XVTYmR6cHNzNUR6eFMxM0hnN0lvIiwiZCI6Ilk3bTY4QXNzTld2Q0dTdVh5VXd4aVo5S0
   VGbVNfd1loM0xtMDRJYThlbjgifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyI
   sImNydiI6IlAtMjU2IiwieCI6IllHeW9vajRPOWdUVVdHSE4zQ1NnRkRVajN6b2M5S0l3
   bWp3SmphVHJRbFkiLCJ5IjoiTjVmSlFYb3dQRFUxS1R4ZFl5Y3c3UGR0VzdJclFwNE1CO
   XJQS1IxLUJYYyIsImQiOiJCMkZJLU9PdHlaTDhjUmtkYU04LTdDRXB6V3F1VlByaUtRV0
   tGT1NmYy1nIn19.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~ImpheWRv
   ZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duL
   CBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG
   9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDU
   sImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ.nufXgYYdWYWQQXMpykwBlO3ssm_hWNIsMSnuBv
   _AYPyNA2wWemPg23qCnwO1zjG9ccAeFck9j3rh-kOE7h0hxg~q-9dlw5BOdfd705qR7Dn
   5Aa3OzuJZrl3kw7SlkBxY6ervShdxAE4iXZNZU4byfgcCZTNCRxNBGwIE7ll23tLNQ~LI
   _VL3Jx2uaiakPBLVXVxG8RInpcL9q1i1cgX7iSUZgGyVq0-4O3xKWcrix5LIzIfSMOmSY
   03pstwdQ2AUl_pA~ORoRicjKIhRk0VaWvOsM79i0wpmGtpU3tLAIRZ3jtZGJRSrgZB00T
   nBC9kKHN7VrpvsKitwXTv5dqvtGhy5IFw~cSMKGhSDZ8R5noKoZXplnTE-9WMmQxaapG2
   vUDJSHf1VIMBTdYi-mhqK9hSov2FQnhN27Cql7FGlnJ2728WQLw~ASlb0UWQH9wZFEwX_
   _Jo-1DqfS8RWaQpSPhRLlDkLNvukkS9HL3DkxVvKC6Ey2xftQ0IbD7tb7U5czvEzSLl9g
   ~XMyQA87NGdmbJl8f2XR7eUwcL7FYFB5qiUe9Obv5h7z1EIhvTk9vD5Zr7POUgp6nDomh
   P5gmeHtjDqJkoqJliw~rXhEMVY9edC6gEa7auFjZOPtF9eni9uRoYy-xmliNOKMADeGV0
   kegSZa23nCFE0oinhFM431Mj01hJF5PXX-KQ

           Figure 7: Issued JWP in Compact Serialization (es256)

   To present this JPT, we first use the following presentation header
   with a nonce (provided by the Verifier):

   {
     "alg": "SU-ES256",
     "aud": "https://recipient.example.com",
     "nonce": "C-gelof1eQxOIjxR8gmBQVgwsLl5o0YfmHwHLX4v8fQ"
   }

                       Figure 8: Presentation Header

   This header is serialized without whitespace and UTF-8 encoded into
   an octet string.  This gives:

   eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaXBpZW50LmV4YW1wbGUuY
   29tIiwibm9uY2UiOiJDLWdlbG9mMWVReE9JanhSOGdtQlFWZ3dzTGw1bzBZZm1Id0hMWD
   R2OGZRIn0

             Figure 9: Presentation Header (base64url-encoded)

   When signed with the holder's presentation key, the resulting
   signature are:

   vnhCOMCPfKbkWgz-77KSAx_GtLs3H1_O7dlo_yqmwuNmrcVemqS3kJ6AzbhxuC_S-MTIo
   L3G_BVAi7MySbmasA

   |  Figure: Holder Proof-of-Possession (base64url-encoded)

   Then by applying selective disclosure of only the given name and age
   claims (family name and email hidden), we get the following presented
   JPT:

   {
     "presentation": "eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaX
          BpZW50LmV4YW1wbGUuY29tIiwibm9uY2UiOiJDLWdlbG9mMWVReE9JanhSOGdt
          QlFWZ3dzTGw1bzBZZm1Id0hMWDR2OGZRIn0",
     "issuer": "eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
          Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaW
          x5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292
          ZXJfMjEiXSwicHJvb2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLC
          J4IjoiSHNUa3RobkNDSF9Vem9nbU84THBWQVUyVkQ1SmhzcFEzNzVsdmstZld5
          ayIsInkiOiJJcEZReDJCanpuMXhHZGJ5S08yU29mdXVTYmR6cHNzNUR6eFMxM0
          hnN0lvIiwiZCI6Ilk3bTY4QXNzTld2Q0dTdVh5VXd4aVo5S0VGbVNfd1loM0xt
          MDRJYThlbjgifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyIsImNydi
          I6IlAtMjU2IiwieCI6IllHeW9vajRPOWdUVVdHSE4zQ1NnRkRVajN6b2M5S0l3
          bWp3SmphVHJRbFkiLCJ5IjoiTjVmSlFYb3dQRFUxS1R4ZFl5Y3c3UGR0VzdJcl
          FwNE1COXJQS1IxLUJYYyIsImQiOiJCMkZJLU9PdHlaTDhjUmtkYU04LTdDRXB6
          V3F1VlByaUtRV0tGT1NmYy1nIn19",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ",
       null,
       null
     ],
     "proof": [
       "nufXgYYdWYWQQXMpykwBlO3ssm_hWNIsMSnuBv_AYPyNA2wWemPg23qCnwO1zjG9
          ccAeFck9j3rh-kOE7h0hxg",
       "vnhCOMCPfKbkWgz-77KSAx_GtLs3H1_O7dlo_yqmwuNmrcVemqS3kJ6AzbhxuC_S
          -MTIoL3G_BVAi7MySbmasA",
       "q-9dlw5BOdfd705qR7Dn5Aa3OzuJZrl3kw7SlkBxY6ervShdxAE4iXZNZU4byfgc
          CZTNCRxNBGwIE7ll23tLNQ",
       "LI_VL3Jx2uaiakPBLVXVxG8RInpcL9q1i1cgX7iSUZgGyVq0-4O3xKWcrix5LIzI
          fSMOmSY03pstwdQ2AUl_pA",
       "ORoRicjKIhRk0VaWvOsM79i0wpmGtpU3tLAIRZ3jtZGJRSrgZB00TnBC9kKHN7Vr
          pvsKitwXTv5dqvtGhy5IFw",
       "cSMKGhSDZ8R5noKoZXplnTE-9WMmQxaapG2vUDJSHf1VIMBTdYi-mhqK9hSov2FQ
          nhN27Cql7FGlnJ2728WQLw",
       "ASlb0UWQH9wZFEwX__Jo-1DqfS8RWaQpSPhRLlDkLNvukkS9HL3DkxVvKC6Ey2xf
          tQ0IbD7tb7U5czvEzSLl9g"
     ]
   }

   |  Figure: Final Presentation in JSON Serialization

   And also in compact serialization:

   eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaXBpZW50LmV4YW1wbGUuY
   29tIiwibm9uY2UiOiJDLWdlbG9mMWVReE9JanhSOGdtQlFWZ3dzTGw1bzBZZm1Id0hMWD
   R2OGZRIn0.eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8
   vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUi
   LCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb
   2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiSHNUa3RobkNDSF9Vem
   9nbU84THBWQVUyVkQ1SmhzcFEzNzVsdmstZld5ayIsInkiOiJJcEZReDJCanpuMXhHZGJ
   5S08yU29mdXVTYmR6cHNzNUR6eFMxM0hnN0lvIiwiZCI6Ilk3bTY4QXNzTld2Q0dTdVh5
   VXd4aVo5S0VGbVNfd1loM0xtMDRJYThlbjgifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrd
   HkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IllHeW9vajRPOWdUVVdHSE4zQ1NnRkRVaj
   N6b2M5S0l3bWp3SmphVHJRbFkiLCJ5IjoiTjVmSlFYb3dQRFUxS1R4ZFl5Y3c3UGR0Vzd
   JclFwNE1COXJQS1IxLUJYYyIsImQiOiJCMkZJLU9PdHlaTDhjUmtkYU04LTdDRXB6V3F1
   VlByaUtRV0tGT1NmYy1nIn19.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheS
   I~ImpheWRvZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5
   Bbnl0b3duLCBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4g
   U3QuIiwibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZ
   SI6MTIzNDUsImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ~~.nufXgYYdWYWQQXMpykwBlO3ssm
   _hWNIsMSnuBv_AYPyNA2wWemPg23qCnwO1zjG9ccAeFck9j3rh-kOE7h0hxg~vnhCOMCP
   fKbkWgz-77KSAx_GtLs3H1_O7dlo_yqmwuNmrcVemqS3kJ6AzbhxuC_S-MTIoL3G_BVAi
   7MySbmasA~q-9dlw5BOdfd705qR7Dn5Aa3OzuJZrl3kw7SlkBxY6ervShdxAE4iXZNZU4
   byfgcCZTNCRxNBGwIE7ll23tLNQ~LI_VL3Jx2uaiakPBLVXVxG8RInpcL9q1i1cgX7iSU
   ZgGyVq0-4O3xKWcrix5LIzIfSMOmSY03pstwdQ2AUl_pA~ORoRicjKIhRk0VaWvOsM79i
   0wpmGtpU3tLAIRZ3jtZGJRSrgZB00TnBC9kKHN7VrpvsKitwXTv5dqvtGhy5IFw~cSMKG
   hSDZ8R5noKoZXplnTE-9WMmQxaapG2vUDJSHf1VIMBTdYi-mhqK9hSov2FQnhN27Cql7F
   GlnJ2728WQLw~ASlb0UWQH9wZFEwX__Jo-1DqfS8RWaQpSPhRLlDkLNvukkS9HL3DkxVv
   KC6Ey2xftQ0IbD7tb7U5czvEzSLl9g

   |  Figure: Final Presentation in Compact Serialization

A.2.  Example BBS JWP

   The following example uses the BBS algorithm.

   This is the Issuer's stable private key in the JWK format:

   {
     "kty": "EC2",
     "alg": "BBS",
     "use": "proof",
     "crv": "BLS12381G2",
     "x": "C4VoM-s_dSxgyadEmlpOcbU0sWH0AdJ75N0mcoTNVEDdCGbDRHThXp1LB0v68
          1gvGawjvKGynP9DrXOveijXbL3H8wDSf1qKGvkHQVltoagA-VpVJSkiLdIP7ci
          58xKH",
     "y": "GV8m156KtRWcnewtp5LBETF96LjZ_4hHOJAM4NeQuoV0uQ3CLb73PB4VOB_Ew
          JIUB-Yz9RJVrToa0zyqMMnSzvIRphN4D9QdyXWMiiseOSWf3xaK2uKrCqIq18B
          lOXyV",
     "d": "Hp2IYNH3BbqQQBdNbTiScU0km9tE1UzG7_A-SoCVWj8"
   }

                  Figure 10: BBS private key in JWK format

   There is no additional holder key necessary for presentation proofs.

   For the following protected header and array of payloads:

   {
     "kid": "HjfcpyjuZQ-O8Ye2hQnNbT9RbbnrobptdnExR0DUjU8",
     "alg": "BBS"
   }

                 Figure 11: Example issuer protected header

   [
       1714521600,
       1717199999,
       "Doe",
       "Jay",
       "jaydoe@example.org",
       {
           "formatted": "1234 Main St.\nAnytown, CA 12345\nUSA",
           "street_address": "1234 Main St.",
           "locality": "Anytown",
           "region": "CA",
           "postal_code": 12345,
           "country": "USA"
       },
       true
   ]

      Figure 12: Example issuer payloads (as members of a JSON array)

   These components are signed using the private issuer key previously
   given, which is then representable in the following serializations:

   {
     "issuer": "eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRu
          RXhSMERValU4IiwiYWxnIjoiQkJTIn0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ"
     ],
     "proof": [
       "oaYbQNF-7xhrhwKY9iHbEOJtAHXFrkM14Z5X3ykD6uUwFLhiNF_mXolwJgyRqmWl
          CqieOD0JQLm7oTma6xuVQluyr9CQuLzWZzlsF7VYpXw"
     ]
   }

                 Figure 13: Issued JWP (JSON serialization)

   eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRuRXhSMERValU4I
   iwiYWxnIjoiQkJTIn0.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~Imph
   eWRvZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b
   3duLCBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIi
   wibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTI
   zNDUsImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ.oaYbQNF-7xhrhwKY9iHbEOJtAHXFrkM14Z
   5X3ykD6uUwFLhiNF_mXolwJgyRqmWlCqieOD0JQLm7oTma6xuVQluyr9CQuLzWZzlsF7V
   YpXw

               Figure 14: Issued JWP (compact serialization)

   For a presentation with the following presentation header:

   {
       "alg": "BBS-PROOF",
       "aud": "https://recipient.example.com",
       "nonce": "wrmBRkKtXjQ"
   }

                   Figure 15: Holder Presentation Header

   The holder decides to share all information other than the email
   address, and generates a proof.  That proof is represented in the
   following serializations:

   {
     "presentation": "eyJhbGciOiJCQlMtUFJPT0YiLCJhdWQiOiJodHRwczovL3JlY2
          lwaWVudC5leGFtcGxlLmNvbSIsIm5vbmNlIjoid3JtQlJrS3RYalEifQ",
     "issuer": "eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRu
          RXhSMERValU4IiwiYWxnIjoiQkJTIn0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       null,
       null,
       null
     ],
     "proof": [
       "gbLO90aWDmi41zq9GMaBhxQn13TF1poO2eY14f2cIAZMPTBWjsCK2Jwznre0prSM
          k9kGp6IwvM-3udAfnRr3OOq6N3f51RnI4nlXotuTOqcmRAM-5mj668ANYN9X_m
          G-oGLeRlStSV9m56bRm2V-uTzs6wwI7Zpm6DIhfBqZfHn0JKhze0MZFQ5mPA2h
          W3MUBTXfVGmaXFp6xvUzSwsxL94j8RsxX7toJlkIZmlDYscKqfqRS8Hb3mozMJ
          _WHkhHG8wieTefegqU2KSh4eaQaz6AvtkSvmw__gupjzBjc0jS70DP8tawTMUH
          kDTM4tPWXdujPrAfWFGQbIdLVwrUNYEf_qudvFurkEWm_tj5h6tkeXot9dJrY9
          tlesMyxYgG59ydmxEQeTain3NBtIPQd0_9mGv6u7Azlk4VK4zxhSoqrUXYk_9z
          pMlXfCdNMFYgcfJLVWiHOSarIprLvEQ9vsruFKJANmvh4qf9BrrE_Sk"
     ]
   }

              Figure 16: Presentation JWP (JSON serialization)

   eyJhbGciOiJCQlMtUFJPT0YiLCJhdWQiOiJodHRwczovL3JlY2lwaWVudC5leGFtcGxlL
   mNvbSIsIm5vbmNlIjoid3JtQlJrS3RYalEifQ.eyJraWQiOiJIamZjcHlqdVpRLU84WWU
   yaFFuTmJUOVJiYm5yb2JwdGRuRXhSMERValU4IiwiYWxnIjoiQkJTIn0.MTcxNDUyMTYw
   MA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~~~.gbLO90aWDmi41zq9GMaBhxQn13TF1poO
   2eY14f2cIAZMPTBWjsCK2Jwznre0prSMk9kGp6IwvM-3udAfnRr3OOq6N3f51RnI4nlXo
   tuTOqcmRAM-5mj668ANYN9X_mG-oGLeRlStSV9m56bRm2V-uTzs6wwI7Zpm6DIhfBqZfH
   n0JKhze0MZFQ5mPA2hW3MUBTXfVGmaXFp6xvUzSwsxL94j8RsxX7toJlkIZmlDYscKqfq
   RS8Hb3mozMJ_WHkhHG8wieTefegqU2KSh4eaQaz6AvtkSvmw__gupjzBjc0jS70DP8taw
   TMUHkDTM4tPWXdujPrAfWFGQbIdLVwrUNYEf_qudvFurkEWm_tj5h6tkeXot9dJrY9tle
   sMyxYgG59ydmxEQeTain3NBtIPQd0_9mGv6u7Azlk4VK4zxhSoqrUXYk_9zpMlXfCdNMF
   YgcfJLVWiHOSarIprLvEQ9vsruFKJANmvh4qf9BrrE_Sk

            Figure 17: Presentation JWP (compact serialization)

A.3.  Example MAC JWP

   The following example uses the MAC-H256 algorithm.

   This is the Issuer's stable private key in the JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "soKXCv67OQw1CmHKzQWPUL6dmXWHqqfz8YLfaMcewAE",
     "y": "ppAH_JTpmDJ2b9qbKCtusEuGW2LPc9d0HMatNt57QYQ",
     "d": "0g-avGj6CbapHIIc0RoisPO2h3Q1TNH0Y5y4i17or88"
   }

                       Figure 18: Issuer private key

   This is the Issuer's ephemerally generated shared secret:

   "y1bUZs6mYITwlvrrxRCTWx1wbrrwSI8qPD9Vj8p9pDs"

                          Figure 19: Shared Secret

   This is the Holder's presentation private key in the JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "YGyooj4O9gTUWGHN3CSgFDUj3zoc9KIwmjwJjaTrQlY",
     "y": "N5fJQXowPDU1KTxdYycw7PdtW7IrQp4MB9rPKR1-BXc",
     "d": "B2FI-OOtyZL8cRkdaM8-7CEpzWquVPriKQWKFOSfc-g"
   }

                       Figure 20: Holder private key

   For the following protected header and array of payloads:

   {
     "alg": "MAC-H256",
     "typ": "JPT",
     "iss": "https://issuer.example",
     "claims": [
       "iat",
       "exp",
       "family_name",
       "given_name",
       "email",
       "address",
       "age_over_21"
     ],
     "pjwk": {
       "kty": "EC",
       "crv": "P-256",
       "use": "sign",
       "x": "YGyooj4O9gTUWGHN3CSgFDUj3zoc9KIwmjwJjaTrQlY",
       "y": "N5fJQXowPDU1KTxdYycw7PdtW7IrQp4MB9rPKR1-BXc"
     }
   }

                 Figure 21: Example issuer protected header

   [
       1714521600,
       1717199999,
       "Doe",
       "Jay",
       "jaydoe@example.org",
       {
           "formatted": "1234 Main St.\nAnytown, CA 12345\nUSA",
           "street_address": "1234 Main St.",
           "locality": "Anytown",
           "region": "CA",
           "postal_code": 12345,
           "country": "USA"
       },
       true
   ]

      Figure 22: Example issuer payloads (as members of a JSON array)

   The first MAC is generated using the key issuer_header and a value of
   the issuer protected header as a UTF-8 encoded octet string.  This
   results in the following MAC:

   BUSem5qtVBTmoeiDka4-gg5XjrVfz5UKv8tn3s_3eos

       Figure 23: Issuer MAC of protected header (base64url-encoded)

   The issuer generates an array of derived keys with one for each
   payload by using the shared secret as the key, and the index of the
   payload (as payload_{n} in UTF-8 encoded octets) as the input in a
   HMAC operation.  This results in the following set of derived keys:

   [
     "ZmWpbIJDRtwAM6ft4kxx3kFfkkkUJmW4vFp06pkRZNI",
     "XFJuY1GcUkxDqBa-jqdZUY7kn5IJnSzha_o6-ZO3SkM",
     "E4TJ-ByMC-pQiSROJbhbppv6-ATpyyquDyANPP7aBx4",
     "SpURrpIwS5Qporx3Yl0WlvoW0NaMquxj-crRY9D5NT4",
     "dua9wbJDqyOloydFpVJHKtJB1gnMKiOGuUcyRAbyjc8",
     "CxBnMhr9vCKzVR4E3TwaJA2KnOsfnjkbYNr2r0FVZRA",
     "4o5n5CDHkKHm8rB5ZpMkLbouPof0bg0YwOtLBskiSgk"
   ]

            Figure 24: Derived payload keys (base64url-encoded)

   A MAC is generated for each payload using the corresponding derived
   payload key.  This results in the following set of MAC values:

   [
     "hYgIxCNs515hd4daAp2CugpYhcPEmXRhXIyu-gswS1o",
     "woDhq3H1QlLzr6fgfUlbPMPoXd7XBR45mX18qeUctDs",
     "rhvzSo4mW_islEVHAQDbsvT2hQkWqVT-WXWyf0lt8mQ",
     "DGB_b3bIrY8FLaJmJRzbCUuH2F45SY07fn3t0a1sdR4",
     "rx8-rNrxrNJ1hSxi4suwSkUoB26Mn1T2ApmZpYNQ1Mw",
     "WGdyYo9VFYlx7VJPDCzfZzE2ZdL3xhy9AOHZA94BExc",
     "Qq-ZhEKw3jjYcwMFpMZpp5qCiMRVCqt3dq6Ost6vBhE"
   ]

             Figure 25: Payload MAC values (base64url-encoded)

   The issuer protected header MAC and the payload MAC octet strings are
   concatenated into a single value known as the combined MAC
   representation.  This representation is signed with the issuer's
   private key.

   The proof consists of two octet string values: the signature over the
   combined MAC representation, and the shared secret.

   [
     "TJZi_e84Az_3AQauIbJP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0YQV
   qxMoP6Hli5KTnU7R4RIA",
     "t_xMfnXRCbaPH3Is3i5uyfZztxEyiRIRBDWM2hAEkik"
   ]

                Figure 26: Issued Proof (base64url-encoded)

   The final issued JWP in JSON serialization is:

   {
     "issuer": "eyJhbGciOiJNQUMtSDI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
   Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hb
   WUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicG
   p3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwidXNlIjoic2lnbiIsIngiOiJZR3l
   vb2o0TzlnVFVXR0hOM0NTZ0ZEVWozem9jOUtJd21qd0pqYVRyUWxZIiwieSI6Ik41ZkpR
   WG93UERVMUtUeGRZeWN3N1BkdFc3SXJRcDRNQjlyUEtSMS1CWGMifX0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
   VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdHkiOiJBb
   nl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUsImNvdW50cnkiOi
   JVU0EifQ",
       "dHJ1ZQ"
     ],
     "proof": [
       "TJZi_e84Az_3AQauIbJP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0Y
   QVqxMoP6Hli5KTnU7R4RIA",
       "t_xMfnXRCbaPH3Is3i5uyfZztxEyiRIRBDWM2hAEkik"
     ]
   }

               Figure 27: Issued JWP (in JSON serialization)

   The same JWP in compact serialization:

   eyJhbGciOiJNQUMtSDI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8vaXNzdWVyL
   mV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUiLCJnaXZlbl
   9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicGp3ayI6eyJrdHk
   iOiJFQyIsImNydiI6IlAtMjU2IiwidXNlIjoic2lnbiIsIngiOiJZR3lvb2o0TzlnVFVX
   R0hOM0NTZ0ZEVWozem9jOUtJd21qd0pqYVRyUWxZIiwieSI6Ik41ZkpRWG93UERVMUtUe
   GRZeWN3N1BkdFc3SXJRcDRNQjlyUEtSMS1CWGMifX0.MTcxNDUyMTYwMA~MTcxNzE5OTk
   5OQ~IkRvZSI~IkpheSI~ImpheWRvZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxM
   jM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3
   MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0E
   iLCJwb3N0YWxfY29kZSI6MTIzNDUsImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ.TJZi_e84Az
   _3AQauIbJP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0YQVqxMoP6Hli5KTn
   U7R4RIA~t_xMfnXRCbaPH3Is3i5uyfZztxEyiRIRBDWM2hAEkik

              Figure 28: Issued JWP (in compact serialization)

   Next, we show the presentation of the JWP with selective disclosure.

   For presentation with the following presentation protected header:

   {
     "alg": "MAC-H256",
     "aud": "https://recipient.example.com",
     "nonce": "C-gelof1eQxOIjxR8gmBQVgwsLl5o0YfmHwHLX4v8fQ"
   }

                  Figure 29: Presentation Protected Header

   The holder will take the issuer proof (including shared secret) and
   derive the same individual payload MAC values (above).

   In this case, the holder has decided not to disclose the last three
   claims provided by the issuer (corresponding to email, address, and
   age_over_21)

   For the disclosed payloads, the holder will provide the corresponding
   derived key.  For the non-disclosed payloads, the holder will provide
   the corresponding MAC value.

   The final presented proof value is an array of octet strings.  The
   contents are presentation header signature, followed by the issuer
   signature, then the value disclosed by the holder for each payload.
   This results in the following proof:

   [
     "jqrS0v7sau--AEjw131bRqv1X1Pva7iZb9sjQLFWsomsrpmotbkV7Qt2bozqseUoSM
   bSRkdve-nr6HbIk5wonw",
     "TJZi_e84Az_3AQauIbJP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0YQV
   qxMoP6Hli5KTnU7R4RIA",
     "ZmWpbIJDRtwAM6ft4kxx3kFfkkkUJmW4vFp06pkRZNI",
     "XFJuY1GcUkxDqBa-jqdZUY7kn5IJnSzha_o6-ZO3SkM",
     "E4TJ-ByMC-pQiSROJbhbppv6-ATpyyquDyANPP7aBx4",
     "SpURrpIwS5Qporx3Yl0WlvoW0NaMquxj-crRY9D5NT4",
     "rx8-rNrxrNJ1hSxi4suwSkUoB26Mn1T2ApmZpYNQ1Mw",
     "WGdyYo9VFYlx7VJPDCzfZzE2ZdL3xhy9AOHZA94BExc",
     "Qq-ZhEKw3jjYcwMFpMZpp5qCiMRVCqt3dq6Ost6vBhE"
   ]

             Figure 30: Presentation proof (base64url-encoded)

   The final presented JWP in JSON serialization is:

   {
     "presentation": "eyJhbGciOiJNQUMtSDI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaX
   BpZW50LmV4YW1wbGUuY29tIiwibm9uY2UiOiJDLWdlbG9mMWVReE9JanhSOGdtQlFWZ3d
   zTGw1bzBZZm1Id0hMWDR2OGZRIn0",
     "issuer": "eyJhbGciOiJNQUMtSDI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
   Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hb
   WUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicG
   p3ayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwidXNlIjoic2lnbiIsIngiOiJZR3l
   vb2o0TzlnVFVXR0hOM0NTZ0ZEVWozem9jOUtJd21qd0pqYVRyUWxZIiwieSI6Ik41ZkpR
   WG93UERVMUtUeGRZeWN3N1BkdFc3SXJRcDRNQjlyUEtSMS1CWGMifX0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       null,
       null,
       null
     ],
     "proof": [
       "jqrS0v7sau--AEjw131bRqv1X1Pva7iZb9sjQLFWsomsrpmotbkV7Qt2bozqseUo
   SMbSRkdve-nr6HbIk5wonw",
       "TJZi_e84Az_3AQauIbJP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0Y
   QVqxMoP6Hli5KTnU7R4RIA",
       "ZmWpbIJDRtwAM6ft4kxx3kFfkkkUJmW4vFp06pkRZNI",
       "XFJuY1GcUkxDqBa-jqdZUY7kn5IJnSzha_o6-ZO3SkM",
       "E4TJ-ByMC-pQiSROJbhbppv6-ATpyyquDyANPP7aBx4",
       "SpURrpIwS5Qporx3Yl0WlvoW0NaMquxj-crRY9D5NT4",
       "rx8-rNrxrNJ1hSxi4suwSkUoB26Mn1T2ApmZpYNQ1Mw",
       "WGdyYo9VFYlx7VJPDCzfZzE2ZdL3xhy9AOHZA94BExc",
       "Qq-ZhEKw3jjYcwMFpMZpp5qCiMRVCqt3dq6Ost6vBhE"
     ]
   }

              Figure 31: Presented JWP (in JSON serialization)

   The same JWP in compact serialization:

   eyJhbGciOiJNQUMtSDI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaXBpZW50LmV4YW1wbGUuY
   29tIiwibm9uY2UiOiJDLWdlbG9mMWVReE9JanhSOGdtQlFWZ3dzTGw1bzBZZm1Id0hMWD
   R2OGZRIn0.eyJhbGciOiJNQUMtSDI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8
   vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUi
   LCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicGp3a
   yI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwidXNlIjoic2lnbiIsIngiOiJZR3lvb2
   o0TzlnVFVXR0hOM0NTZ0ZEVWozem9jOUtJd21qd0pqYVRyUWxZIiwieSI6Ik41ZkpRWG9
   3UERVMUtUeGRZeWN3N1BkdFc3SXJRcDRNQjlyUEtSMS1CWGMifX0.MTcxNDUyMTYwMA~M
   TcxNzE5OTk5OQ~IkRvZSI~IkpheSI~~~.jqrS0v7sau--AEjw131bRqv1X1Pva7iZb9sj
   QLFWsomsrpmotbkV7Qt2bozqseUoSMbSRkdve-nr6HbIk5wonw~TJZi_e84Az_3AQauIb
   JP22cBUllPnnziXJy2RySOfRoz3ZYu81QvcKctmbZbQd0YQVqxMoP6Hli5KTnU7R4RIA~
   ZmWpbIJDRtwAM6ft4kxx3kFfkkkUJmW4vFp06pkRZNI~XFJuY1GcUkxDqBa-jqdZUY7kn
   5IJnSzha_o6-ZO3SkM~E4TJ-ByMC-pQiSROJbhbppv6-ATpyyquDyANPP7aBx4~SpURrp
   IwS5Qporx3Yl0WlvoW0NaMquxj-crRY9D5NT4~rx8-rNrxrNJ1hSxi4suwSkUoB26Mn1T
   2ApmZpYNQ1Mw~WGdyYo9VFYlx7VJPDCzfZzE2ZdL3xhy9AOHZA94BExc~Qq-ZhEKw3jjY
   cwMFpMZpp5qCiMRVCqt3dq6Ost6vBhE

            Figure 32: Presented JWP (in compact serialization)

Appendix B.  Acknowledgements

   This work was incubated in the DIF Applied Cryptography Working Group
   (https://identity.foundation/working-groups/crypto.html).

   We would like to thank Alberto Solavagione for his valuable
   contributions to this specification.

   The BBS examples were generated using the library at
   https://github.com/mattrglobal/pairing_crypto
   (https://github.com/mattrglobal/pairing_crypto) .

Appendix C.  Document History

   [[ To be removed from the final specification ]]

   *  Update reference to new repository home
   *  Fixed #77: Removed vestigial use of presentation_header.

   -05

   *  Update of appendix describing MAC-H256 to now also be generated by
      the build system from a common set of code and templates.
   *  Update single use algorithm to use an array of octet values rather
      than requiring splitting an octet buffer into parts during
      generation of a presentation and during verification.
   *  Update BBS algorithm description and examples to clarify the proof
      is an array with a single octet string.
   *  Update MAC algorithm to use an array of octet values for the
      proof, rather than requiring splitting an octet buffer into parts.
   *  Add new section on the Combined MAC Representation to clarify
      operations are serving to recreate this octet string value.
   *  Correct reference to the latest BBS draft.
   *  SU and MAC families now use raw JWA rather than JWS and
      synthesized headers
   *  Change algorithms to not use base64url-encoding internally.
      Algorithms are meant to operate on octets, while base64url-
      encoding is used to represent those octets in JSON and compact
      serializations.

   -04

   *  Refactoring figures and examples to be built from a common set
      across all three documents
   *  Move single-use example appendix from JWP to JPA
   *  Change algorithm from BBS-DRAFT-5 to BBS, and from BBS-PROOF-
      DRAFT-5 to BBS-PROOF
   *  Update BBS ciphersuite ID to BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_
   *  Update to draft 5 BLS key representations

   -03

   *  Improvements resulting from a full proofreading.
   *  Populated IANA Considerations section.
   *  Updated to use BBS draft -05.
   *  Updated examples.

   -02

   *  Add new BBS-DRAFT-3 and BBS-PROOF-DRAFT-3 algorithms based on
      draft-irtf-cfrg-bbs-signatures-03.
   *  Remove prior BBS-X algorithm based on a particular implementation
      of earlier drafts.

   -01

   *  Correct cross-references within group
   *  Describe issuer_header and presentation_header
   *  Update BBS references to CFRG drafts
   *  Rework reference to HMAC ( RFC2104 )
   *  Remove ZKSnark placeholder

   -00

   *  Created initial working group draft based on draft-jmiller-jose-
      json-proof-algorithms-01

Authors' Addresses

   Jeremie Miller
   Ping Identity
   Email: jmiller@pingidentity.com


   Michael B. Jones
   Self-Issued Consulting
   Email: michael_b_jones@hotmail.com
   URI:   https://self-issued.info/


   David Waite
   Ping Identity
   Email: dwaite+jwp@pingidentity.com
