



jose                                                           J. Miller
Internet-Draft                                             Ping Identity
Intended status: Standards Track                                M. Jones
Expires: 9 January 2025                           Self-Issued Consulting
                                                                D. Waite
                                                           Ping Identity
                                                             8 July 2024


                         JSON Proof Algorithms
              draft-ietf-jose-json-proof-algorithms-latest

Abstract

   The JSON Proof Algorithms (JPA) specification registers cryptographic
   algorithms and identifiers to be used with the JSON Web Proof and
   JSON Web Key (JWK) specifications.  It defines IANA registries for
   these identifiers.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 9 January 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  Terminology
   4.  Background
   5.  Algorithm Basics
     5.1.  Issue
     5.2.  Confirm
     5.3.  Present
     5.4.  Verify
   6.  Algorithm Specifications
     6.1.  Single Use
       6.1.1.  JWS Algorithm
       6.1.2.  Holder Setup
       6.1.3.  Issuer Setup
       6.1.4.  Using JWS
       6.1.5.  Issuer Protected Header
       6.1.6.  Payloads
       6.1.7.  Presentation Protected Header
       6.1.8.  Presentation
       6.1.9.  Verification
       6.1.10. JPA Registration
     6.2.  BBS
       6.2.1.  JPA Algorithms
       6.2.2.  Key Format
       6.2.3.  Issuance
       6.2.4.  Issuance Proof Verification
       6.2.5.  Presentation
       6.2.6.  Presentation Verification
     6.3.  Message Authentication Code
       6.3.1.  Holder Setup
       6.3.2.  Issuer Setup
       6.3.3.  Issuer Protected Header
       6.3.4.  Payloads
       6.3.5.  Issuer Proof
       6.3.6.  Presentation Protected Header
       6.3.7.  Presentation
       6.3.8.  Verifier Setup
       6.3.9.  JPA Registration
   7.  Security Considerations
   8.  IANA Considerations
     8.1.  JSON Web Proof Algorithms Registry
       8.1.1.  Registration Template
       8.1.2.  Initial Registry Contents
     8.2.  Header Parameter Names Registration
       8.2.1.  Registry Contents
   9.  References
     9.1.  Normative References
     9.2.  Informative References
   Appendix A.  Example JWPs
     A.1.  Example Single-Use JWP
     A.2.  Example BBS JWP
     A.3.  Example MAC JWP
   Appendix B.  Acknowledgements
   Appendix C.  Document History
   Authors' Addresses

1.  Introduction

   The JSON Web Proof (JWP) [I-D.ietf-jose-json-web-proof] draft
   establishes a new secure container format that supports selective
   disclosure and unlinkability using Zero-Knowledge Proofs (ZKPs) or
   other cryptographic algorithms.

   |  Editor's Note: This draft is still early and incomplete.  There
   |  will be significant changes to the algorithms as currently defined
   |  here.  Please do not use any of these definitions or examples for
   |  anything except personal experimentation and learning.
   |  Contributions and feedback are welcomed at https://github.com/
   |  json-web-proofs/json-web-proofs (https://github.com/json-web-
   |  proofs/json-web-proofs).

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in BCP
   14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

   The roles of "issuer", "holder", and "verifier" are used as defined
   by the VC Data Model [VC-DATA-MODEL-2.0].  The term "presentation" is
   also used as defined by this source, but the term "credential" is
   avoided in this specification to minimize confusion with other
   definitions.

3.  Terminology

   The terms "JSON Web Signature (JWS)", "Base64url Encoding", "Header
   Parameter", "JOSE Header", "JWS Payload", "JWS Signature", and "JWS
   Protected Header" are defined by [RFC7515].

   The terms "JSON Web Proof (JWP)", "JWP Payload", "JWP Proof", and
   "JWP Protected Header" are defined by [I-D.ietf-jose-json-web-proof].

   These terms are defined by this specification:

   Stable Key:  An asymmetric key-pair used by an issuer that is also
      shared via an out-of-band mechanism to a verifier to validate the
      signature.
   Ephemeral Key:  An asymmetric key-pair that is generated for one-time
      use by an issuer and never stored or used again outside of the
      creation of a single JWP.
   Presentation Key:  An asymmetric key-pair that is generated by a
      holder and used to ensure that a presentation is not able to be
      replayed by any other party.

4.  Background

   JWP defines a container binding together a protected header, one or
   more payloads, and a cryptographic proof.  It does not define any
   details about the interactions between an application and the
   cryptographic libraries that implement proof-supporting algorithms.

   Due to the nature of ZKPs, this specification also documents the
   subtle but important differences in proof algorithms versus those
   defined by the JSON Web Algorithms [RFC7518].  These differences help
   support more advanced capabilities such as blinded signatures and
   predicate proofs.

5.  Algorithm Basics

   The four principal interactions that every proof algorithm MUST
   support are [issue](#issue), [confirm](#confirm),
   [present](#present), and [verify](#verify).

5.1.  Issue

   The JWP is first created as the output of a JPA's issue operation.

   Every algorithm MUST support a JSON issuer protected header along
   with one or more octet string payloads.  The algorithm MAY support
   using additional items provided by the holder for issuance such as
   blinded payloads, keys for replay prevention, etc.

   All algorithms MUST provide integrity protection for the issuer
   header and all payloads and MUST specify all digest and/or hash2curve
   methods used.

5.2.  Confirm

   Performed by the holder to validate that the issued JWP is correctly
   formed and protected.

   Each algorithm MAY support using additional input items options, such
   as those sent to the issuer for issuance.  After confirmation, an
   algorithm MAY return a modified JWP for serialized storage without
   the local state (such as with blinded payloads now unblinded).

   The algorithm MUST fully verify the issued proof value against the
   issuer protected header and all payloads.  If given a presented JWP
   instead of an issued one, the confirm process MUST return an error.

5.3.  Present

   Used to apply any selective disclosure choices and perform any
   unlinkability transformations, as well as to show binding.

   An algorithm MAY support additional input options from the requesting
   party, such as for predicate proofs and verifiable computation
   requests.

   Every algorithm MUST support the ability to hide any or all payloads.
   It MUST always include the issuer protected header unmodified in the
   presentation.

   The algorithm MUST replace the issued proof value and generate a new
   presented proof value.  It also MUST include a new presentation
   protected header that provides replay protection.

5.4.  Verify

   Performed by the verifier to verify the protected headers along with
   any disclosed payloads and/or assertions about them from the proving
   party, while also verifying they are the same payloads and ordering
   as witnessed by the issuer.

   The algorithm MUST verify the integrity of all disclosed payloads and
   MUST also verify the integrity of both the issuer and presentation
   protected headers.

   If the presented proof contains any assertions about the hidden
   payloads, the algorithm MUST also verify all of those assertions.  It
   MAY support additional options, such as those sent to the holder to
   generate the presentation.

   If given an issued JWP for verification, the algorithm MUST return an
   error.

6.  Algorithm Specifications

   This section defines how to use specific algorithms for JWPs.

6.1.  Single Use

   |  Editor's Note: This algorithm may be renamed and slightly
   |  refactored.

   The Single Use (SU) algorithm is based on composing multiple
   traditional JWS values into a single JWP proof value.  It enables a
   very simple form of selective disclosure without requiring any
   advanced cryptographic techniques.

   It does not support unlinkability if the same JWP is presented
   multiple times, therefore when privacy is required the holder will
   need to interact with the issuer again to receive new single-use JWPs
   (dynamically or in batches).

6.1.1.  JWS Algorithm

   The Single Use algorithm is based on using multiple JWS values, all
   of which are generated with the same JSON Web Algorithm (JWA) for
   signing.  This JWA identifier is included as part of the Single Use
   identifier for JWP.

   The chosen JWA MUST be an asymmetric signing algorithm so that each
   signature can be verified without sharing any private values between
   the parties.  This ensures that the verifier cannot brute force any
   non-disclosed payloads based only on their disclosed individual
   signatures.

6.1.2.  Holder Setup

   In order to support the protection of a presentation by a holder to a
   verifier, the holder MUST use a Presentation Key during the issuance
   and the presentation of every Single Use JWP.  This Presentation Key
   MUST be generated and used for only one JWP.

   The issuer MUST verify that the holder has possession of this key.
   The holder-issuer communication to exchange this information is out
   of scope of this specification but can be easily accomplished by the
   holder using this key to generate a JWS that signs a value the issuer
   can verify as unique.

6.1.3.  Issuer Setup

   To create a Single Use JWP, the issuer first generates a unique
   Ephemeral Key using the selected JWS algorithm.  This key-pair will
   be used to sign each of the payloads of a single JWP and then
   discarded.

6.1.4.  Using JWS

   JSON Web Signatures are used to create all of the signature values
   used by the SU algorithm.  This allows an implementation to use an
   existing JWS library directly for all necessary cryptographic
   operations without requiring any additional primitives.

   Each individual JWS uses a fixed protected header containing only the
   minimum required alg value.  Since this JWS protected header itself
   is the same for every JWS, it SHOULD be a static value in the form of
   {"alg":"***"} where *** is the JWA asymmetric signing key algorithm
   identifier being used.  This value is recreated by a verifier using
   the correct JWA algorithm value included in the SU algorithm
   identifier.

   If an implementation uses an alternative JWS protected header than
   this fixed value, a base64url encoded serialized form of the
   alternate fixed header MUST be included using the jws_header claim in
   the issuer protected header.

6.1.5.  Issuer Protected Header

   The JWK of the issuer's Ephemeral Key MUST be included in the issuer
   protected header with the property name of proof_jwk and contain only
   the REQUIRED values to represent the public key.

   The holder's Presentation Key JWK MUST be included in issuer
   protected header using the presentation_jwk claim.

   The final issuer protected header is then used directly as the body
   of a JWS and signed using the issuer's Stable Key.  The resulting JWS
   signature value unencoded octet string is the first value in the JWP
   proof.

   In various examples in this specification, the octet string
   serialized issuer header is referenced as issuer_header.

6.1.6.  Payloads

   Each JWP payload is processed in order and signed as a JWS body using
   the issuer's Ephemeral Key.  The resulting JWS signature value
   unencoded octet string is appended to the JWP proof.

   The proof value as an octet string will have a total length that is
   the sum of the fixed length of the issuer protected header signature
   plus the fixed length of each of the payload Ephemeral Key
   signatures.  For example, the signature for the ES256 algorithm is 64
   octets and for a JWP with five payloads the total proof value length
   would be 64 * (1 + 5) = 384 octets).

6.1.7.  Presentation Protected Header

   To generate a new presentation, the holder first creates a
   presentation protected header that is specific to the verifier being
   presented to.  This header MUST contain a claim that both the holder
   and verifier trust as being unique and non-replayable.  Use of the
   nonce header parameter is RECOMMENDED for this purpose.

   This specification registers the nonce header parameter for the
   presentation protected header that contains a string value either
   generated by the verifier or derived from values provided by the
   verifier.  When present, the verifier MUST ensure the nonce value
   matches during verification.

   The presentation protected header MAY contain other header parameters
   that are either provided by the verifier or by the holder.  These
   presentation claims SHOULD NOT contain values that are common across
   multiple presentations and SHOULD be unique to a single presentation
   and verifier.

   In various examples in this specification, the octet string
   serialized presentation header is referenced as presentation_header.

6.1.8.  Presentation

   |  Editor's Note: The current definition here is incomplete, the
   |  holder's signature needs to also incorporate the presented proof.

   The holder derives a new proof value when presenting it to a
   verifier.  The presented proof value will always contain the issuer's
   Stable Key signature for the issuer protected header as the first
   element.

   The second element of the presented proof value is always the
   holder's Presentation Key signature of the presentation protected
   header, constructed identically to the issuer protected header by
   using the serialized JSON value octet string as the JWS body.
   Signing only the presentation header with the Presentation Key is
   sufficient to protect the entire presentation since that key is
   private to the holder and only the contents of the presentation
   header are used for replay prevention.

   The two header signatures are then followed by only the issuer's
   Ephemeral Key signatures for each payload that is disclosed.  The
   order of the payload signatures is preserved and MUST be in the same
   order as the included disclosed payloads in the presented JWP.  Non-
   disclosed payloads will NOT have a signature value included.  For
   example, if the second and fifth payloads are hidden then the
   holder's derived proof value would be of the length 64 * (1 + 1 + the
   1st, 2nd, and 4th payload signatures) = 320 octets.

   Since the individual signatures in the proof value are unique and
   remain unchanged across multiple presentations, a Single Use JWP
   SHOULD only be presented a single time to each verifier in order for
   the holder to remain unlinkable across multiple presentations.

6.1.9.  Verification

   The verifier MUST verify the issuer protected header against the
   first matching JWS signature part in the proof value using the
   issuer's Stable Key.  It MUST also verify the presentation protected
   header against the second JWS signature part in the proof value using
   the holder's Presentation Key as provided in the presentation_jwk
   claim in the issuer protected header.

   With the headers verified, the issuer's Ephemeral Key as given in the
   issuer protected header proof_jwk claim can then be used to verify
   each of the disclosed payload signatures.

6.1.10.  JPA Registration

   The proposed JWP alg value is of the format "SU-" appended with the
   relevant JWS alg value for the chosen public and ephemeral key-pair
   algorithm, for example "SU-ES256".

6.2.  BBS

   The BBS Signature Scheme [I-D.irtf-cfrg-bbs-signatures] is under
   active development within the CRFG.

   This algorithm supports both selective disclosure and unlinkability,
   enabling the holder to generate multiple presentations from one
   issued JWP without a verifier being able to correlate those
   presentations together based on the proof.

6.2.1.  JPA Algorithms

   The BBS alg parameter value in the issuance protected header
   corresponds to a ciphersuite identifier of BBS_BLS12381G1_XMD:SHA-
   256_SSWU_RO_.

   The BBS-PROOF alg parameter value in the presentation protected
   header corresponds to the same ciphersuite, but used in presentation
   form.

6.2.2.  Key Format

   The key used for the BBS algorithm is an elliptic curve-based key
   pair, specifically against the G_2 subgroup of a pairing friendly
   curve.  Additional details on key generation can be found in
   Section 3.4

   The JWK form of this key is an OKP type with a curve of BLS12381G2,
   with x being the BASE64URL-encoded form of the output of
   point_to_octets_E2.  The use of this curve is described in
   [I-D.ietf-cose-bls-key-representations].

   There is no additional holder key necessary for presentation proofs.

6.2.3.  Issuance

   Issuance is performed using the Sign operation from Section 3.5.1 of
   [I-D.irtf-cfrg-bbs-signatures].  This operation utilizes the issuer's
   BLS12-381 G2 key pair as SK and PK, along with desired protected
   header and payloads as the octets header and the octets array
   messages.

   The octets resulting from this operation form the issuance proof, to
   be used along with the protected header and payloads to serialize the
   JWP.

6.2.4.  Issuance Proof Verification

   Holder verification of the signature on issuance form is performed
   using the Verify operation from Section 3.5.2 of
   [I-D.irtf-cfrg-bbs-signatures].

   This operation utilizes the issuer's public key as PK, the proof as
   signature, the protected header octets as header and the array of
   payload octets as messages.

6.2.5.  Presentation

   Derivation of a presentation is done by the holder using the ProofGen
   operation from Section 3.5.3 of [I-D.irtf-cfrg-bbs-signatures].

   This operation utilizes the issuer's public key as PK, the issuer
   protected header as header, the issuance proof as signature, the
   issuance payloads as messages, and the holder's presentation
   protected header as ph.

   The operation also takes a vector of indexes into messages,
   describing which payloads the holder wishes to disclose.  All
   payloads are required for proof generation, but only these indicated
   payloads will be required to be disclosed for later proof
   verification.

   The output of this operation is the presentation proof.

   Presentation serialization leverages the two protected headers and
   presentation proof, along with the disclosed payloads.  Non-disclosed
   payloads are represented with the absent value of null in JSON
   serialization and a zero-length string in compact serialization.

6.2.6.  Presentation Verification

   Verification of a presentation is done by the verifier using the
   ProofVerify operation from Section 3.5.4.

   This operation utilizes the issuer's public key as PK, the issuer
   protected header as header, the issuance proof as signature, the
   holder's presentation protected header as ph, and the payloads as
   disclosed_messages.

   In addition, the disclosed_indexes scalar array is calculated from
   the payloads provided.  Values disclosed in the presented payloads
   have a zero-based index in this array, while the indices of absent
   payloads are omitted.

6.3.  Message Authentication Code

   The Message Authentication Code (MAC) JPA uses a MAC to both generate
   ephemeral keys and compute authentication codes to protect the issuer
   header and each payload individually.

   Like the JWS-based JPA, it also does not support unlinkability if the
   same JWP is presented multiple times and requires an individually
   issued JWP for each presentation in order to fully protect privacy.
   When compared to the JWS approach, using a MAC requires less
   computation but can result in potentially larger presentation proof
   values.

   The design is intentionally minimal and only involves using a single
   standardized MAC method instead of a mix of MAC/hash methods or a
   custom hash-based construct.  It is able to use any published
   cryptographic MAC method such as HMAC [RFC2104] or KMAC
   (https://nvlpubs.nist.gov/nistpubs/SpecialPublications/
   NIST.SP.800-185.pdf).  It uses traditional public-key based
   signatures to verify the authenticity of the issuer and holder.

6.3.1.  Holder Setup

   Prior to the issuer creating a new JWP, it must have presentation
   binding information provided by the holder.  This enables the holder
   to perform replay prevention while presenting the JWP.

   The presentation key used by the holder must be transferred to the
   issuer and verified, likely through a challenge and self-signing
   mechanism.  If the holder requires unlinkability, it must also
   generate a new key that is verified and bound to each new JWP.

   How these holder presentation keys are transferred and verified is
   out of scope of this specification.  Protocols such as OpenID Connect
   can be used to accomplish this.  What is required by this definition
   is that the holder's presentation key MUST be included in the
   issuer's protected header using the pjwk claim with a JWK as the
   value.

6.3.2.  Issuer Setup

   To use the MAC algorithm, the issuer must have a stable public key
   pair to perform signing.  To start the issuance process, a single
   32-byte random Shared Secret must first be generated.  This value
   will be shared privately to the holder as part of the issuer's JWP
   proof value.

   The Shared Secret is used by both the issuer and holder as the MAC
   method's key to generate a new set of unique ephemeral keys.  These
   keys are then used as the input to generate a MAC that protects each
   payload.

6.3.3.  Issuer Protected Header

   The holder's presentation key JWK MUST be included in the issuer
   protected header using the pjwk claim.  The issuer MUST validate that
   the holder has possession of this key through a trusted mechanism
   such as verifying the signature of a unique nonce value from the
   holder.

   For consistency, the issuer header is also protected by a MAC by
   using the fixed value "issuer_header" as the input key.  The issuer
   header JSON is serialized using UTF-8 and encoded with base64url into
   an octet array.  The final issuer header MAC is generated from the
   octet array and the fixed key, and the resulting value becomes the
   first input into the larger octet array that will be signed by the
   issuer.

6.3.4.  Payloads

   A unique key is generated for each payload using the MAC with the
   Shared Secret as the key and the values "payload_X" where "X" is
   replaced by the zero-based array index of the payload, for example
   "payload_0", "payload_1", etc.

   Each payload is serialized using UTF-8 and encoded with base64url
   into an octet array.  The generated key for that payload based on its
   index is used to generate the MAC for the payload's encoded octet
   array.  The resulting value is appended to the larger octet array
   that will be signed by the issuer.

6.3.5.  Issuer Proof

   The issuer proof consists of two items appended together: the
   issuer's signature of the appended array of MACs and the Shared
   Secret used to generate the set of payload keys.

   To generate the signature, the array containing the final MAC of the
   issuer protected header followed by all of the payload MACs appended
   in order is used as the input to a new JWS.

   jws_payload = [issuer_header_mac, payload_mac_1, ... payload_mac_n]

   The issuer signs the JWS using its stable public key and a fixed
   header containing the alg associated with MAC algorithm in use.

   jws_header = '{"alg":"ES256"}'

   The resulting signature is decoded and used as the first item in the
   issuer proof value.  The octet array of the Shared Secret is
   appended, resulting in the final issuer proof value.

   issuer_proof = [jws_signature, shared_secret]

6.3.6.  Presentation Protected Header

   See the JWS Presentation Protected Header (#presentation-protected-
   header) section.

6.3.7.  Presentation

   |  Editor's Note: The current definition here is incomplete, the
   |  holder's signature needs to also incorporate the presented proof.

   The presentation proof is constructed as a large octet array
   containing multiple appended items similar to the issuer proof value.
   The first item is the JWS decoded signature value generated when the
   holder uses the presentation key to sign the presentation header.
   The second item is the issuer signature from the issuer's proof
   value.

   These two signatures are then followed by a MAC value for each
   payload.  The MAC values used will depend on whether that payload has
   been disclosed or is hidden.  Disclosed payloads will include the MAC
   key input, and hidden payloads will include only their final MAC
   value.

   presentation_proof = [presentation_signature, issuer_signature,
                         disclosed_key_0, hidden_mac_1, hidden_mac_2,
                         ... disclosed_key_n]

   The size of this value will depend on the underlying cryptographic
   algorithms.  For example, MAC-H256 uses the ES256 JWS with a decoded
   signature of 64 octets, and for a JWP with five payloads using HMAC-
   SHA256 the total presentation proof value length would be 64 + 64 +
   (5 * 32) = 288 octets.

6.3.8.  Verifier Setup

   To verify that the presentation was protected from replay attacks,
   the verifier must be able to validate the presentation protected
   header.  This involves the following steps:

   1.  JSON parse the presentation header
   2.  Validate the contained nonce claim
   3.  JSON parse the issuer header
   4.  Validate the contained pjwk claim
   5.  Create a JWS using the correct fixed header with alg value and
       the presentation header as the body
   6.  Remove the presentation_signature from the beginning of the
       presentation_proof octet array
   7.  Validate the JWS using the JWK from the pjwk claim and the
       presentation_signature value

   Next, the verifier must validate all of the disclosed payloads using
   the following steps:

   1.  JSON parse the issuer header
   2.  Resolve the kid using a trusted mechanism to obtain the correct
       issuer JWK
   3.  Remove the issuer_signature from the beginning of the remaining
       presentation_proof octet array (after the presentation_signature
       was removed)
   4.  Perform the MAC on the presented issuer_header value using the
       "issuer_header" value as the input key
   5.  Store the resulting value as the first entry in a new jws_payload
       octet array
   6.  Iterate on each presented payload (disclosed or hidden)
       1.  Extract the next hash value from the remaining
           presentation_proof octet array
       2.  If the payload was disclosed: perform a MAC using the given
           hash value as the input key and append the result to the
           jws_payload octet array
       3.  If the payload was hidden: append the given hash value to the
           jws_payload octet array
   7.  Create a JWS using a header containing the alg parameter along
       with the generated jws_payload value as the payload
   8.  Validate the JWS using the resolved issuer JWK and the extracted
       issuer_signature value

6.3.9.  JPA Registration

   Proposed JWP alg value is of the format "MAC-" appended with a unique
   identifier for the set of MAC and signing algorithms used.  Below are
   the initial registrations:

   *  MAC-H256 uses HMAC SHA-256 as the MAC and ECDSA using P-256 and
      SHA-256 for the signatures
   *  MAC-H384 uses HMAC SHA-384 as the MAC and ECDSA using P-384 and
      SHA-384 for the signatures
   *  MAC-H512 uses HMAC SHA-512 as the MAC and ECDSA using P-521 and
      SHA-512 for the signatures
   *  MAC-K25519 uses KMAC SHAKE128 as the MAC and EdDSA using
      Curve25519 for the signatures
   *  MAC-K448 uses KMAC SHAKE256 as the MAC and EdDSA using Curve448
      for the signatures
   *  MAC-H256K uses HMAC SHA-256 as the MAC and ECDSA using secp256k1
      and SHA-256 for the signatures

7.  Security Considerations

   |  Editor's Note: This will follow once the algorithms defined here
   |  have become more stable.

   *  Data minimization of the proof value
   *  Unlinkability of the protected header contents

8.  IANA Considerations

   The following registration procedure is used for all the registries
   established by this specification.

   Values are registered on a Specification Required [RFC5226] basis
   after a three-week review period on the jose-reg-review@ietf.org
   mailing list, on the advice of one or more Designated Experts.
   However, to allow for the allocation of values prior to publication,
   the Designated Experts may approve registration once they are
   satisfied that such a specification will be published.

   Registration requests sent to the mailing list for review should use
   an appropriate subject (e.g., "Request to register JWP algorithm:
   example").

   Within the review period, the Designated Experts will either approve
   or deny the registration request, communicating this decision to the
   review list and IANA.  Denials should include an explanation and, if
   applicable, suggestions as to how to make the request successful.
   Registration requests that are undetermined for a period longer than
   21 days can be brought to the IESG's attention (using the
   iesg@ietf.org mailing list) for resolution.

   Criteria that should be applied by the Designated Experts include
   determining whether the proposed registration duplicates existing
   functionality, whether it is likely to be of general applicability or
   useful only for a single application, and whether the registration
   description is clear.

   IANA must only accept registry updates from the Designated Experts
   and should direct all requests for registration to the review mailing
   list.

   It is suggested that multiple Designated Experts be appointed who are
   able to represent the perspectives of different applications using
   this specification, in order to enable broadly informed review of
   registration decisions.  In cases where a registration decision could
   be perceived as creating a conflict of interest for a particular
   Expert, that Expert should defer to the judgment of the other
   Experts.

8.1.  JSON Web Proof Algorithms Registry

   This specification establishes the IANA "JSON Web Proof Algorithms"
   registry for values of the JWP alg (algorithm) parameter in JWP
   Header Parameters.  The registry records the algorithm name, the
   algorithm description, the algorithm usage locations, the
   implementation requirements, the change controller, and a reference
   to the specification that defines it.  The same algorithm name can be
   registered multiple times, provided that the sets of usage locations
   are disjoint.

   It is suggested that the length of the key be included in the
   algorithm name when multiple variations of algorithms are being
   registered that use keys of different lengths and the key lengths for
   each need to be fixed (for instance, because they will be created by
   key derivation functions).  This allows readers of the JSON text to
   more easily make security decisions.

   The Designated Experts should perform reasonable due diligence that
   algorithms being registered either are currently considered
   cryptographically credible or are being registered as Deprecated or
   Prohibited.

   The implementation requirements of an algorithm may be changed over
   time as the cryptographic landscape evolves, for instance, to change
   the status of an algorithm to Deprecated or to change the status of
   an algorithm from Optional to Recommended+ or Required.  Changes of
   implementation requirements are only permitted on a Specification
   Required basis after review by the Designated Experts, with the new
   specification defining the revised implementation requirements level.

8.1.1.  Registration Template

   *  Algorithm Name: The name requested (e.g., "SU-ES256").  This name
      is a case-sensitive ASCII string.  Names may not match other
      registered names in a case-insensitive manner unless the
      Designated Experts state that there is a compelling reason to
      allow an exception.
   *  Algorithm Description: Brief description of the algorithm (e.g.,
      "Single-Use JWP using ES256").
   *  Algorithm Usage Location(s): The algorithm usage locations, which
      should be one or more of the values Issued or Presented.  Other
      values may be used with the approval of a Designated Expert.
   *  JWP Implementation Requirements: The algorithm implementation
      requirements for JWP, which must be one the words Required,
      Recommended, Optional, Deprecated, or Prohibited.  Optionally, the
      word can be followed by a "+" or "-".  The use of "+" indicates
      that the requirement strength is likely to be increased in a
      future version of the specification.  The use of "-" indicates
      that the requirement strength is likely to be decreased in a
      future version of the specification.  Any identifiers registered
      for non-authenticated encryption algorithms or other algorithms
      that are otherwise unsuitable for direct use as JWP algorithms
      must be registered as "Prohibited".
   *  Change Controller: For Standards Track RFCs, list the "IETF".  For
      others, give the name of the responsible party.  Other details
      (e.g., postal address, email address, home page URI) may also be
      included.
   *  Specification Document(s): Reference to the document or documents
      that specify the parameter, preferably including URIs that can be
      used to retrieve copies of the documents.  An indication of the
      relevant sections may also be included but is not required.
   *  Algorithm Analysis Documents(s): References to a publication or
      publications in well-known cryptographic conferences, by national
      standards bodies, or by other authoritative sources analyzing the
      cryptographic soundness of the algorithm to be registered.  The
      Designated Experts may require convincing evidence of the
      cryptographic soundness of a new algorithm to be provided with the
      registration request unless the algorithm is being registered as
      Deprecated or Prohibited.  Having gone through working group and
      IETF review, the initial registrations made by this document are
      exempt from the need to provide this information.

8.1.2.  Initial Registry Contents

   *  Algorithm Name: SU-ES256

   *  Algorithm Description: Single-Use JWP using ES256

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Recommended

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.10 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: SU-ES384

   *  Algorithm Description: Single-Use JWP using ES384

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.10 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: SU-ES512

   *  Algorithm Description: Single-Use JWP using ES512

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.10 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: BBS

   *  Algorithm Description: Corresponds to a ciphersuite identifier of
      BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_H2G_HM2S_

   *  Algorithm Usage Location(s): Issued

   *  JWP Implementation Requirements: Required

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.2.1 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: BBS-PROOF

   *  Algorithm Description: Corresponds to a ciphersuite identifier of
      BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_H2G_HM2S_

   *  Algorithm Usage Location(s): Presented

   *  JWP Implementation Requirements: Required

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.2.1 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H256

   *  Algorithm Description: MAC-H256 uses HMAC SHA-256 as the MAC and
      ECDSA using P-256 and SHA-256 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H384

   *  Algorithm Description: MAC-H384 uses HMAC SHA-384 as the MAC and
      ECDSA using P-384 and SHA-384 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H512

   *  Algorithm Description: MAC-H512 uses HMAC SHA-512 as the MAC and
      ECDSA using P-521 and SHA-512 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-K25519

   *  Algorithm Description: MAC-K25519 uses KMAC SHAKE128 as the MAC
      and EdDSA using Curve25519 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-K448

   *  Algorithm Description: MAC-K448 uses KMAC SHAKE256 as the MAC and
      EdDSA using Curve448 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

   *  Algorithm Name: MAC-H256K

   *  Algorithm Description: MAC-H256K uses HMAC SHA-256 as the MAC and
      ECDSA using secp256k1 and SHA-256 for the signatures

   *  Algorithm Usage Location(s): Issued, Presented

   *  JWP Implementation Requirements: Optional

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.3.9 of this specification

   *  Algorithm Analysis Documents(s): n/a

8.2.  Header Parameter Names Registration

   This section registers the following Header Parameter names defined
   by this specification in the IANA "JSON Web Proof Header Parameters"
   registry established by [I-D.ietf-jose-json-web-proof].

8.2.1.  Registry Contents

   *  Header Parameter Name: proof_jwk

   *  Header Parameter Description: Issuer's Ephemeral Key

   *  Header Parameter Usage Location(s): Issued

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.5 of this specification

   *  Header Parameter Name: presentation_jwk

   *  Header Parameter Description: Holder's Presentation Key

   *  Header Parameter Usage Location(s): Issued

   *  Change Controller: IETF

   *  Specification Document(s): Section 6.1.5 of this specification

9.  References

9.1.  Normative References

   [I-D.ietf-cose-bls-key-representations]
              Looker, T. and M. B. Jones, "Barreto-Lynn-Scott Elliptic
              Curve Key Representations for JOSE and COSE", Work in
              Progress, Internet-Draft, draft-ietf-cose-bls-key-
              representations-05, 17 March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-cose-
              bls-key-representations-05>.

   [I-D.ietf-jose-json-web-proof]
              Miller, J., Waite, D., and M. B. Jones, "JSON Web Proof",
              Work in Progress, Internet-Draft, draft-ietf-jose-json-
              web-proof-03, 1 March 2024,
              <https://datatracker.ietf.org/doc/html/draft-ietf-jose-
              json-web-proof-03>.

   [I-D.irtf-cfrg-bbs-signatures]
              Looker, T., Kalos, V., Whitehead, A., and M. Lodder, "The
              BBS Signature Scheme", Work in Progress, Internet-Draft,
              draft-irtf-cfrg-bbs-signatures-05, 21 December 2023,
              <https://datatracker.ietf.org/doc/html/draft-irtf-cfrg-
              bbs-signatures-05>.

9.2.  Informative References

   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-
              Hashing for Message Authentication", RFC 2104,
              DOI 10.17487/RFC2104, February 1997,
              <https://www.rfc-editor.org/info/rfc2104>.

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/info/rfc2119>.

   [RFC5226]  Narten, T. and H. Alvestrand, "Guidelines for Writing an
              IANA Considerations Section in RFCs", RFC 5226,
              DOI 10.17487/RFC5226, May 2008,
              <https://www.rfc-editor.org/info/rfc5226>.

   [RFC7515]  Jones, M., Bradley, J., and N. Sakimura, "JSON Web
              Signature (JWS)", RFC 7515, DOI 10.17487/RFC7515, May
              2015, <https://www.rfc-editor.org/info/rfc7515>.

   [RFC7518]  Jones, M., "JSON Web Algorithms (JWA)", RFC 7518,
              DOI 10.17487/RFC7518, May 2015,
              <https://www.rfc-editor.org/info/rfc7518>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/info/rfc8174>.

   [VC-DATA-MODEL-2.0]
              Sporny, M., Jr, T. T., Herman, I., Jones, M. B., and G.
              Cohen, "Verifiable Credentials Data Model 2.0", 27
              December 2023, <https://www.w3.org/TR/vc-data-model-2.0>.

Appendix A.  Example JWPs

   The following examples use algorithms defined in JSON Proof
   Algorithms and also contain the keys used, so that implementations
   can validate these samples.

A.1.  Example Single-Use JWP

   This example uses the Single-Use Algorithm as defined in JSON Proof
   Algorithms to create a JSON Proof Token.  It demonstrates how to
   apply selective disclosure using an array of traditional JWS-based
   signatures.  Unlinkability is only achieved by using each JWP one
   time, as multiple uses are inherently linkable via the traditional
   ECDSA signature embedded in the proof.

   To begin, we need two asymmetric keys for Single Use: one that
   represents the JPT Issuer's stable key and the other is an ephemeral
   key generated by the Issuer just for this JWP.

   This is the Issuer's stable private key used in this example in the
   JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "r43c2miaJ1N-DZGJuFHSpdKqYVdHo-49CbXfv75Jsgw",
     "y": "DTclwSG7Pvb-Fyh93u6kj5i-6ofAwLT3p9MvoennVFM",
     "d": "hyPx0EEa83D81fYW3Kiv3LO6R5mni5r4YaS8Ta13T9w"
   }

                    Figure 1: Issuer Private Key (es256)

   This is the ephemeral private key used in this example in the JWK
   format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "_I36LZtDcEYINRww79n_K_0wpgU2SGbzcwnrBESc23A",
     "y": "2lRQBzfzd1utcySv_W_hN5ZMy3Lnjp1atM4wn-8BpcE",
     "d": "TIdJwnMyZ0aAX6AEQfcWFcsTa_0fXlfxu8tkeDigg2U"
   }

               Figure 2: Issuer Ephemeral Private Key (es256)

   This is the Holder's presentation private key used in this example in
   the JWK format:

   {
     "kty": "EC",
     "crv": "P-256",
     "x": "JfC9S0VBA6xy871Tu-SmikpoIlEvWvfe137FXLFXXHA",
     "y": "9AgGOHyKkkxDFxFFzO_a6EESTIHANsR0nGEH4WzwLjM",
     "d": "SpjbTg7BrwivzemHCQl_hCL6aY2zoqZFFVS8b_4Ieh0"
   }

                 Figure 3: Holder Presentation Private Key

   The JWP Protected Header declares that the data structure is a JPT
   and the JWP Proof Input is secured using the Single-Use ECDSA
   algorithm with the P-256 curve and SHA-256 digest.  It also includes
   the ephemeral public key, the Holder's presentation public key and
   list of claims used for this JPT.

   {
     "alg": "SU-ES256",
     "typ": "JPT",
     "iss": "https://issuer.example",
     "claims": [
       "iat",
       "exp",
       "family_name",
       "given_name",
       "email",
       "address",
       "age_over_21"
     ],
     "proof_jwk": {
       "kty": "EC",
       "crv": "P-256",
       "x": "_I36LZtDcEYINRww79n_K_0wpgU2SGbzcwnrBESc23A",
       "y": "2lRQBzfzd1utcySv_W_hN5ZMy3Lnjp1atM4wn-8BpcE",
       "d": "TIdJwnMyZ0aAX6AEQfcWFcsTa_0fXlfxu8tkeDigg2U"
     },
     "presentation_jwk": {
       "kty": "EC",
       "crv": "P-256",
       "x": "JfC9S0VBA6xy871Tu-SmikpoIlEvWvfe137FXLFXXHA",
       "y": "9AgGOHyKkkxDFxFFzO_a6EESTIHANsR0nGEH4WzwLjM",
       "d": "SpjbTg7BrwivzemHCQl_hCL6aY2zoqZFFVS8b_4Ieh0"
     }
   }

                 Figure 4: Issuer Protected header (es256)

   The JWP Protected Header is serialized (without the above whitespace
   added for readability) into UTF-8, then BASE64URL-encoded.  This
   gives:

   eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8vaXNzdWVyL
   mV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUiLCJnaXZlbl
   9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb2ZfandrIjp
   7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiX0kzNkxadERjRVlJTlJ3dzc5bl9L
   XzB3cGdVMlNHYnpjd25yQkVTYzIzQSIsInkiOiIybFJRQnpmemQxdXRjeVN2X1dfaE41W
   k15M0xuanAxYXRNNHduLThCcGNFIiwiZCI6IlRJZEp3bk15WjBhQVg2QUVRZmNXRmNzVG
   FfMGZYbGZ4dTh0a2VEaWdnMlUifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyI
   sImNydiI6IlAtMjU2IiwieCI6IkpmQzlTMFZCQTZ4eTg3MVR1LVNtaWtwb0lsRXZXdmZl
   MTM3RlhMRlhYSEEiLCJ5IjoiOUFnR09IeUtra3hERnhGRnpPX2E2RUVTVElIQU5zUjBuR
   0VINFd6d0xqTSIsImQiOiJTcGpiVGc3QnJ3aXZ6ZW1IQ1FsX2hDTDZhWTJ6b3FaRkZWUz
   hiXzRJZWgwIn19

             Figure 5: Encoded Issuer Protected Header (es256)

   The Single Use algorithm utilizes multiple individual JWS Signatures.
   Each signature value is generated by creating a JWS with a single
   Protected Header with the associated alg value.  In this example, the
   fixed header used for each JWS is the serialized JSON Object
   {"alg":"ES256"}.  The JWS payload for each varies and the resulting
   signature value is used in its unencoded form (the octet string, not
   the base64url-encoded form).

   The final Proof value from the Issuer is the concatenated array of
   the header signature followed by all of the payload signatures, then
   base64url encoded.

   The resulting JSON serialized JPT using the above examples is:

   {
     "issuer": "eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
          Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaW
          x5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292
          ZXJfMjEiXSwicHJvb2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLC
          J4IjoiX0kzNkxadERjRVlJTlJ3dzc5bl9LXzB3cGdVMlNHYnpjd25yQkVTYzIz
          QSIsInkiOiIybFJRQnpmemQxdXRjeVN2X1dfaE41Wk15M0xuanAxYXRNNHduLT
          hCcGNFIiwiZCI6IlRJZEp3bk15WjBhQVg2QUVRZmNXRmNzVGFfMGZYbGZ4dTh0
          a2VEaWdnMlUifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyIsImNydi
          I6IlAtMjU2IiwieCI6IkpmQzlTMFZCQTZ4eTg3MVR1LVNtaWtwb0lsRXZXdmZl
          MTM3RlhMRlhYSEEiLCJ5IjoiOUFnR09IeUtra3hERnhGRnpPX2E2RUVTVElIQU
          5zUjBuR0VINFd6d0xqTSIsImQiOiJTcGpiVGc3QnJ3aXZ6ZW1IQ1FsX2hDTDZh
          WTJ6b3FaRkZWUzhiXzRJZWgwIn19",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ"
     ],
     "proof": "dJ1o01jN_cvoIRtB7DsdMHpeza0hlv-bWkgCnjOsh78Gch--VZhluHnRR
          gT3X4Gc8IevFs21aMx0OW5wpA1xnzEHFQMEQsa5D26pCKKEh0lP-lsp1VtU6kj
          1QR4lINXVvGDM3onRhlSJCo78knOxh8GhjrOnAR7VKc7rrj9sCsktQx13iHFST
          yFGQsKzooV1LzZQ0kvV_6FIiE8lHUohva-gK3TQRSqUgP926dOJodQJzZO5byd
          _pPyZ1KeVH99aHpyv0BxJRSkddfGtOqZJPZzH1sFz_1eHjjQJnkkIPEoLEbILR
          PMqQ9HA5GhiXLke1btjOn80JmldhyqyKsdjCB9LHP0eDM_bk8AF1-kVHHFHJSB
          dkXoN36TNLdgv-XCGD2jETHcUeihiaTaBm_rTxFFdWP9z4UAtRcc2ArfGNefws
          M5FnM0Pi6-bg-UQ7C410dB2bTBJytJnEq7QpgkH7yNiP3MwbmV3-BxHT_o22W1
          pD23M_1eXpMIyX0wo8ArBZRJX5xblDNRd5VIxsUiZpSUS79I3MwzlYYYF6UF0w
          ABURbRxr-5UFrPj_HHp50OMS-NoGMOkVxX9T4TSck5kgIjmTOlVqB0hYoM26Jv
          4pJBRiZOVTbfEx24k2AxnumRguR7fnJLwJwHLCfzqfWKa1Bv-IOCzeVvlmrMly
          lAX5Po"
   }

             Figure 6: Issued JWP in JSON Serialization (es256)

   The compact serialization of the same JPT is:

   eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8vaXNzdWVyL
   mV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUiLCJnaXZlbl
   9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb2ZfandrIjp
   7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiX0kzNkxadERjRVlJTlJ3dzc5bl9L
   XzB3cGdVMlNHYnpjd25yQkVTYzIzQSIsInkiOiIybFJRQnpmemQxdXRjeVN2X1dfaE41W
   k15M0xuanAxYXRNNHduLThCcGNFIiwiZCI6IlRJZEp3bk15WjBhQVg2QUVRZmNXRmNzVG
   FfMGZYbGZ4dTh0a2VEaWdnMlUifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyI
   sImNydiI6IlAtMjU2IiwieCI6IkpmQzlTMFZCQTZ4eTg3MVR1LVNtaWtwb0lsRXZXdmZl
   MTM3RlhMRlhYSEEiLCJ5IjoiOUFnR09IeUtra3hERnhGRnpPX2E2RUVTVElIQU5zUjBuR
   0VINFd6d0xqTSIsImQiOiJTcGpiVGc3QnJ3aXZ6ZW1IQ1FsX2hDTDZhWTJ6b3FaRkZWUz
   hiXzRJZWgwIn19.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~ImpheWRv
   ZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duL
   CBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG
   9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDU
   sImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ.dJ1o01jN_cvoIRtB7DsdMHpeza0hlv-bWkgCnj
   Osh78Gch--VZhluHnRRgT3X4Gc8IevFs21aMx0OW5wpA1xnzEHFQMEQsa5D26pCKKEh0l
   P-lsp1VtU6kj1QR4lINXVvGDM3onRhlSJCo78knOxh8GhjrOnAR7VKc7rrj9sCsktQx13
   iHFSTyFGQsKzooV1LzZQ0kvV_6FIiE8lHUohva-gK3TQRSqUgP926dOJodQJzZO5byd_p
   PyZ1KeVH99aHpyv0BxJRSkddfGtOqZJPZzH1sFz_1eHjjQJnkkIPEoLEbILRPMqQ9HA5G
   hiXLke1btjOn80JmldhyqyKsdjCB9LHP0eDM_bk8AF1-kVHHFHJSBdkXoN36TNLdgv-XC
   GD2jETHcUeihiaTaBm_rTxFFdWP9z4UAtRcc2ArfGNefwsM5FnM0Pi6-bg-UQ7C410dB2
   bTBJytJnEq7QpgkH7yNiP3MwbmV3-BxHT_o22W1pD23M_1eXpMIyX0wo8ArBZRJX5xblD
   NRd5VIxsUiZpSUS79I3MwzlYYYF6UF0wABURbRxr-5UFrPj_HHp50OMS-NoGMOkVxX9T4
   TSck5kgIjmTOlVqB0hYoM26Jv4pJBRiZOVTbfEx24k2AxnumRguR7fnJLwJwHLCfzqfWK
   a1Bv-IOCzeVvlmrMlylAX5Po

           Figure 7: Issued JWP in Compact Serialization (es256)

   To present this JPT, we first use the following presentation header
   with a nonce (provided by the Verifier):

   {
     "alg": "SU-ES256",
     "aud": "https://recipient.example.com",
     "nonce": "pI1Q5Qn4uc_lbJso0j67sYF2_TaXbDr-nwDxAFwHBiY"
   }

                       Figure 8: Presentation Header

   When serialized without formatting and BASE64URL-encoded, this
   results in the string:

   eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaXBpZW50LmV4YW1wbGUuY
   29tIiwibm9uY2UiOiJwSTFRNVFuNHVjX2xiSnNvMGo2N3NZRjJfVGFYYkRyLW53RHhBRn
   dIQmlZIn0

             Figure 9: Presentation Header (BASE64URL-encoded)

   When signed with the holder's presentation key, the resulting
   signature are:

   UGRJUFNKN0w5N2ktV3ZxV1lBNU10anllMFRrRkdGbWhLUHA3aW1lMjFVN3VDWXIyUlFDZ
   FQ4QVVxQmpjeVNhTUVBT0EwZkxNMGVSZ2J3R2ZWejRrNEE

   |  Figure: Holder Proof-of-Possession (BASE64URL-encoded)

   Then by applying selective disclosure of only the given name and age
   claims (family name and email hidden), we get the following presented
   JPT:

   {
     "presentation": "eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaX
          BpZW50LmV4YW1wbGUuY29tIiwibm9uY2UiOiJwSTFRNVFuNHVjX2xiSnNvMGo2
          N3NZRjJfVGFYYkRyLW53RHhBRndIQmlZIn0",
     "issuer": "eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBz
          Oi8vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaW
          x5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292
          ZXJfMjEiXSwicHJvb2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLC
          J4IjoiX0kzNkxadERjRVlJTlJ3dzc5bl9LXzB3cGdVMlNHYnpjd25yQkVTYzIz
          QSIsInkiOiIybFJRQnpmemQxdXRjeVN2X1dfaE41Wk15M0xuanAxYXRNNHduLT
          hCcGNFIiwiZCI6IlRJZEp3bk15WjBhQVg2QUVRZmNXRmNzVGFfMGZYbGZ4dTh0
          a2VEaWdnMlUifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrdHkiOiJFQyIsImNydi
          I6IlAtMjU2IiwieCI6IkpmQzlTMFZCQTZ4eTg3MVR1LVNtaWtwb0lsRXZXdmZl
          MTM3RlhMRlhYSEEiLCJ5IjoiOUFnR09IeUtra3hERnhGRnpPX2E2RUVTVElIQU
          5zUjBuR0VINFd6d0xqTSIsImQiOiJTcGpiVGc3QnJ3aXZ6ZW1IQ1FsX2hDTDZh
          WTJ6b3FaRkZWUzhiXzRJZWgwIn19",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ",
       null,
       null
     ],
     "proof": "ZEoxbzAxak5fY3ZvSVJ0QjdEc2RNSHBlemEwaGx2LWJXa2dDbmpPc2g3O
          EdjaC0tVlpobHVIblJSZ1QzWDRHYzhJZXZGczIxYU14ME9XNXdwQTF4bnozU0Q
          waWV5X2U0dmxyNmxtQU9UTFk4bnRFNUJSaFpvU2o2ZTRwbnR0Vk83Z21LOWtVQ
          W5VX0FGS2dZM01rbWpCQURnTkh5ek5Ia1lHOEJuMWMtSk9BeEJ4VURCRUxHdVE
          5dXFRaWloSWRKVF9wYktkVmJWT3BJOVVFZUpTRFYxYnhnek42SjBZWlVpUXFPX
          0pKenNZZkJvWTZ6cHdFZTFTbk82NjRfYkFySkxVTWRkNGh4VWs4aFJrTENzNkt
          GZFM4MlVOSkwxZi1oU0loUEpSMUtJYjJ2b0N0MDBFVXFsSURfZHVuVGlhSFVDY
          zJUdVc4bmY2VDhtZFNubFJfZldoNmNyOUFjU1VVcEhYWHhyVHFtU1QyY3g5YkJ
          jXzlYaDQ0MENaNUpDRHhLQ3hHeUMwVHpLa1BSd09Sb1lseTVIdFc3WXpwX05DW
          nBYWWNxc2lySFl3Z2ZTeHo5SGd6UDI1UEFCZGZwRlJ4eFJ5VWdYWkY2RGQta3p
          TM1lMX2x3aGc5b3hFeDNGSG9vWW1rMmdadjYwOFJSWFZqX2MtRkFMVVhITmdLM
          3hqWG44TERPUlp6TkQ0dXZtNFBsRU93dU5kSFFkbTB3U2NyU1p4S3UwS1lKQi0
          4allqOXpNRzVsZF9nY1IwXzZOdGx0YVE5dHpQOVhsNlRDTWw5TUtQQUt3UQ"
   }

   |  Figure: Final Presentation in JSON Serialization

   And also in compact serialization:

   eyJhbGciOiJTVS1FUzI1NiIsImF1ZCI6Imh0dHBzOi8vcmVjaXBpZW50LmV4YW1wbGUuY
   29tIiwibm9uY2UiOiJwSTFRNVFuNHVjX2xiSnNvMGo2N3NZRjJfVGFYYkRyLW53RHhBRn
   dIQmlZIn0.eyJhbGciOiJTVS1FUzI1NiIsInR5cCI6IkpQVCIsImlzcyI6Imh0dHBzOi8
   vaXNzdWVyLmV4YW1wbGUiLCJjbGFpbXMiOlsiaWF0IiwiZXhwIiwiZmFtaWx5X25hbWUi
   LCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZGRyZXNzIiwiYWdlX292ZXJfMjEiXSwicHJvb
   2ZfandrIjp7Imt0eSI6IkVDIiwiY3J2IjoiUC0yNTYiLCJ4IjoiX0kzNkxadERjRVlJTl
   J3dzc5bl9LXzB3cGdVMlNHYnpjd25yQkVTYzIzQSIsInkiOiIybFJRQnpmemQxdXRjeVN
   2X1dfaE41Wk15M0xuanAxYXRNNHduLThCcGNFIiwiZCI6IlRJZEp3bk15WjBhQVg2QUVR
   ZmNXRmNzVGFfMGZYbGZ4dTh0a2VEaWdnMlUifSwicHJlc2VudGF0aW9uX2p3ayI6eyJrd
   HkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IkpmQzlTMFZCQTZ4eTg3MVR1LVNtaWtwb0
   lsRXZXdmZlMTM3RlhMRlhYSEEiLCJ5IjoiOUFnR09IeUtra3hERnhGRnpPX2E2RUVTVEl
   IQU5zUjBuR0VINFd6d0xqTSIsImQiOiJTcGpiVGc3QnJ3aXZ6ZW1IQ1FsX2hDTDZhWTJ6
   b3FaRkZWUzhiXzRJZWgwIn19.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheS
   I~ImpheWRvZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5
   Bbnl0b3duLCBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4g
   U3QuIiwibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZ
   SI6MTIzNDUsImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ~~.ZEoxbzAxak5fY3ZvSVJ0QjdEc2
   RNSHBlemEwaGx2LWJXa2dDbmpPc2g3OEdjaC0tVlpobHVIblJSZ1QzWDRHYzhJZXZGczI
   xYU14ME9XNXdwQTF4bnozU0QwaWV5X2U0dmxyNmxtQU9UTFk4bnRFNUJSaFpvU2o2ZTRw
   bnR0Vk83Z21LOWtVQW5VX0FGS2dZM01rbWpCQURnTkh5ek5Ia1lHOEJuMWMtSk9BeEJ4V
   URCRUxHdVE5dXFRaWloSWRKVF9wYktkVmJWT3BJOVVFZUpTRFYxYnhnek42SjBZWlVpUX
   FPX0pKenNZZkJvWTZ6cHdFZTFTbk82NjRfYkFySkxVTWRkNGh4VWs4aFJrTENzNktGZFM
   4MlVOSkwxZi1oU0loUEpSMUtJYjJ2b0N0MDBFVXFsSURfZHVuVGlhSFVDYzJUdVc4bmY2
   VDhtZFNubFJfZldoNmNyOUFjU1VVcEhYWHhyVHFtU1QyY3g5YkJjXzlYaDQ0MENaNUpDR
   HhLQ3hHeUMwVHpLa1BSd09Sb1lseTVIdFc3WXpwX05DWnBYWWNxc2lySFl3Z2ZTeHo5SG
   d6UDI1UEFCZGZwRlJ4eFJ5VWdYWkY2RGQta3pTM1lMX2x3aGc5b3hFeDNGSG9vWW1rMmd
   adjYwOFJSWFZqX2MtRkFMVVhITmdLM3hqWG44TERPUlp6TkQ0dXZtNFBsRU93dU5kSFFk
   bTB3U2NyU1p4S3UwS1lKQi04allqOXpNRzVsZF9nY1IwXzZOdGx0YVE5dHpQOVhsNlRDT
   Ww5TUtQQUt3UQ

   |  Figure: Final Presentation in Compact Serialization

A.2.  Example BBS JWP

   The following example uses the BBS algorithm.

   This is the Signer's stable private key in the JWK format:

   {
     "kty": "EC2",
     "alg": "BBS",
     "use": "proof",
     "crv": "BLS12381G2",
     "x": "FmEbmoqlndA3ls9fB9m32-mrUz6RpQbKv03JR_WQQPaG-KOcSVnuhmbnes257
          WB8GFC61cVgoGOmhLaD7ngNzNhlYKDaHS4gLg7NNzGBoU_P7Ac_RO4mh1JzGQE
          7CoFH",
     "y": "FJYngEOiLb0E19YfFGajLIlM5eig177xpvixAOztLO70wecC_7rQ3GFd9dNhP
          oiyCayHYyLWmaKRGAOYaetrQHpvl9dtZhafmLU1XlH85K76SAiAb4tEWjYPvIz
          Tnemm",
     "d": "X5yazvWqQWCUVBZ9-QHVXoaceRwC-s2iH9MgmzxbxWI"
   }

                  Figure 10: BBS private key in JWK format

   There is no additional holder key necessary for presentation proofs.

   For the following protected header and array of payloads:

   {
     "kid": "HjfcpyjuZQ-O8Ye2hQnNbT9RbbnrobptdnExR0DUjU8",
     "alg": "BBS"
   }

                 Figure 11: Example issuer protected header

   [
       1714521600,
       1717199999,
       "Doe",
       "Jay",
       "jaydoe@example.org",
       {
           "formatted": "1234 Main St.\nAnytown, CA 12345\nUSA",
           "street_address": "1234 Main St.",
           "locality": "Anytown",
           "region": "CA",
           "postal_code": 12345,
           "country": "USA"
       },
       true
   ]

      Figure 12: Example issuer payloads (as members of a JSON array)

   These components are signed using the private issuer key previously
   given, which is then representable in the following serializations:

   {
     "issuer": "eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRu
          RXhSMERValU4IiwiYWxnIjoiQkJTIn0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b3duLCBDQSAxMjM0NVxu
          VVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIiwibG9jYWxpdH
          kiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTIzNDUs
          ImNvdW50cnkiOiJVU0EifQ",
       "dHJ1ZQ"
     ],
     "proof": "qCNcAZN4t5CsWvpe_jUS82W2tMp0BIuAH4mMVBywLpX9O-yffKKJg2fDh
          oCyT3rySHoZBQZobhgv5pnoaTZmUXoKjBUgE2bSqOlFZj_ATfE"
   }

                 Figure 13: Issued JWP (JSON serialization)

   eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRuRXhSMERValU4I
   iwiYWxnIjoiQkJTIn0.MTcxNDUyMTYwMA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~Imph
   eWRvZUBleGFtcGxlLm9yZyI~eyJmb3JtYXR0ZWQiOiIxMjM0IE1haW4gU3QuXG5Bbnl0b
   3duLCBDQSAxMjM0NVxuVVNBIiwic3RyZWV0X2FkZHJlc3MiOiIxMjM0IE1haW4gU3QuIi
   wibG9jYWxpdHkiOiJBbnl0b3duIiwicmVnaW9uIjoiQ0EiLCJwb3N0YWxfY29kZSI6MTI
   zNDUsImNvdW50cnkiOiJVU0EifQ~dHJ1ZQ.qCNcAZN4t5CsWvpe_jUS82W2tMp0BIuAH4
   mMVBywLpX9O-yffKKJg2fDhoCyT3rySHoZBQZobhgv5pnoaTZmUXoKjBUgE2bSqOlFZj_
   ATfE

               Figure 14: Issued JWP (compact serialization)

   For a presentation with the following presentation header:

   {
       "alg": "BBS-PROOF",
       "aud": "https://recipient.example.com",
       "nonce": "wrmBRkKtXjQ"
   }

                   Figure 15: Holder Presentation Header

   The holder decides to share all information other than the email
   address, and generates a proof.  That proof is represented in the
   following serializations:

   {
     "presentation": "eyJhbGciOiJCQlMtUFJPT0YiLCJhdWQiOiJodHRwczovL3JlY2
          lwaWVudC5leGFtcGxlLmNvbSIsIm5vbmNlIjoid3JtQlJrS3RYalEifQ",
     "issuer": "eyJraWQiOiJIamZjcHlqdVpRLU84WWUyaFFuTmJUOVJiYm5yb2JwdGRu
          RXhSMERValU4IiwiYWxnIjoiQkJTIn0",
     "payloads": [
       "MTcxNDUyMTYwMA",
       "MTcxNzE5OTk5OQ",
       "IkRvZSI",
       "IkpheSI",
       null,
       null,
       null
     ],
     "proof": "tiJEkyUQ8rl4NW1Hv-pGgbBy0EE1YNXd8i_SBuF7aPLTDGxpDdLMMD1bv
          quWostFmQ-MTXXv0FxmSJVgO5Uu_pLNhHgEbQOtHoDqWbg35OSKKxTBLQ62oJA
          kBHYV3ccqlbFAw0ozBuQPvWniVYxKTjymvpW4QDEhINJolQcnaK78PIG-UTb6y
          LBvK1NCUZYQIgVzTAxY96s3CHKSoDEMjdBI9jhe3Ri8v2JOWuk41wwgxrbiaBa
          yV0dHr4GMHh7O5lUmO3lonXf1ZFNv6SEmhyCwlPfYeTKfA2bGeOqi6f0xkg75N
          0PJT9dYfxXuVqGPaa71PFnwMnabpLcovJEgJ9aZf_rOTrhRYUj30uR889QSMmm
          fFNMOFcp6KkAYCPIp7JLLtUFi9fnwwfPTfGR7bGN_nzcNCYHMlifHg2z5ENuWh
          7NOHslYFM0o5PCbcu97LcalBvaNYDCyxIGerzFtF5-DOWazwTLw5YMVoZySEek
          "
   }

              Figure 16: Presentation JWP (JSON serialization)

   eyJhbGciOiJCQlMtUFJPT0YiLCJhdWQiOiJodHRwczovL3JlY2lwaWVudC5leGFtcGxlL
   mNvbSIsIm5vbmNlIjoid3JtQlJrS3RYalEifQ.eyJraWQiOiJIamZjcHlqdVpRLU84WWU
   yaFFuTmJUOVJiYm5yb2JwdGRuRXhSMERValU4IiwiYWxnIjoiQkJTIn0.MTcxNDUyMTYw
   MA~MTcxNzE5OTk5OQ~IkRvZSI~IkpheSI~~~.tiJEkyUQ8rl4NW1Hv-pGgbBy0EE1YNXd
   8i_SBuF7aPLTDGxpDdLMMD1bvquWostFmQ-MTXXv0FxmSJVgO5Uu_pLNhHgEbQOtHoDqW
   bg35OSKKxTBLQ62oJAkBHYV3ccqlbFAw0ozBuQPvWniVYxKTjymvpW4QDEhINJolQcnaK
   78PIG-UTb6yLBvK1NCUZYQIgVzTAxY96s3CHKSoDEMjdBI9jhe3Ri8v2JOWuk41wwgxrb
   iaBayV0dHr4GMHh7O5lUmO3lonXf1ZFNv6SEmhyCwlPfYeTKfA2bGeOqi6f0xkg75N0PJ
   T9dYfxXuVqGPaa71PFnwMnabpLcovJEgJ9aZf_rOTrhRYUj30uR889QSMmmfFNMOFcp6K
   kAYCPIp7JLLtUFi9fnwwfPTfGR7bGN_nzcNCYHMlifHg2z5ENuWh7NOHslYFM0o5PCbcu
   97LcalBvaNYDCyxIGerzFtF5-DOWazwTLw5YMVoZySEek

            Figure 17: Presentation JWP (compact serialization)

A.3.  Example MAC JWP

   The following example uses the MAC-H256 algorithm.

   This is the Signer's stable private key in the JWK format:

   {
     "crv": "P-256",
     "kty": "EC",
     "x": "ONebN43-G5DOwZX6jCVpEYEe0bYd5WDybXAG0sL3iDA",
     "y": "b0MHuYfSxu3Pj4DAyDXabAc0mPjpB1worEpr3yyrft4",
     "d": "jnE0-9YvxQtLJEKcyUHU6HQ3Y9nSDnh0NstYJFn7RuI"
   }

                       Figure 18: issuer-private-jwk

   This is the Signer's generated Shared Secret:

   [100, 109, 91, 184, 139, 20, 107, 86, 1, 252, 86, 159, 126, 251,
   228, 4, 35, 177, 75, 96, 11, 205, 144, 189, 42, 95, 135, 170, 107,
   58, 99, 142]

                        Figure 19: mac-shared-secret

   This is the Holder's presentation private key in the JWK format:

   {
     "crv": "P-256",
     "kty": "EC",
     "x": "oB1TPrE_QJIL61fUOOK5DpKgd8j2zbZJtqpILDTJX6I",
     "y": "3JqnrkucLobkdRuOqZXOP9MMlbFyenFOLyGlG-FPACM",
     "d": "AvyDPl1I4xwjrI2iEOi6DxM9ipJe_h_VUN5OvoKvvW8"
   }

                     Figure 20: holder-presentation-jwk

   The first MAC is generated using the key issuer_header and the
   base64url-encoded issuer protected header, resulting in this octet
   array:

   [140, 88, 59, 30, 127, 113, 27, 237, 78, 200, 182, 114, 94, 123,
   198, 128, 102, 232, 178, 88, 252, 248, 57, 2, 231, 19, 145, 8, 160,
   197, 66, 166]

                      Figure 21: mac-issuer-header-mac

   The issuer generates an array of derived keys with one for each
   payload by using the shared secret as the key and the index of the
   payload as the input:

   [
    [180, 129, 55, 94, 125, 158, 179, 245, 30, 199, 148, 60, 184, 28,
    197, 123, 231, 232, 95, 91, 65, 74, 38, 242, 253, 96, 67, 44, 40,
    220, 250, 4],
    [143, 172, 182, 156, 184, 138, 228, 172, 215, 26, 175, 137, 137,
    25, 159, 141, 213, 12, 214, 29, 231, 200, 13, 94, 116, 22, 41, 115,
    72, 214, 57, 98],
    [144, 73, 77, 66, 230, 187, 217, 186, 246, 41, 138, 25, 39, 203,
    101, 76, 156, 161, 244, 130, 203, 166, 184, 154, 7, 4, 218, 84,
    168, 199, 36, 245],
    [70, 55, 182, 105, 101, 130, 254, 234, 68, 224, 219, 97, 119, 98,
    244, 33, 43, 55, 148, 238, 225, 177, 101, 160, 49, 246, 109, 155,
    242, 236, 21, 138]
   ]

                         Figure 22: mac-issuer-keys

   The first payload is the string "Doe" with the octet sequence of [
   34, 68, 111, 101, 34 ] and base64url-encoded as IkRvZSI.

   The second payload is the string "Jay" with the octet sequence of [
   34, 74, 97, 121, 34 ] and base64url-encoded as IkpheSI.

   The third payload is the string "jaydoe@example.org" with the octet
   sequence of [ 34, 106, 97, 121, 100, 111, 101, 64, 101, 120, 97, 109,
   112, 108, 101, 46, 111, 114, 103, 34 ] and base64url-encoded as
   ImpheWRvZUBleGFtcGxlLm9yZyI.

   The fourth payload is the string 42 with the octet sequence of [ 52,
   50 ] and base64url-encoded as NDI.

   A MAC is generated for each payload using the generated key for its
   given index, resulting in an array of MACs:

   [
    [156, 53, 90, 125, 139, 226, 60, 168, 100, 220, 79, 255, 8, 87, 28,
    220, 237, 112, 161, 91, 39, 68, 137, 203, 92, 243, 16, 116, 64,
    129, 61, 172],
    [239, 17, 12, 35, 111, 129, 51, 87, 43, 86, 234, 38, 89, 149, 169,
    157, 33, 104, 81, 246, 190, 154, 74, 195, 194, 158, 50, 208, 203,
    203, 249, 237],
    [162, 174, 12, 27, 190, 250, 112, 1, 139, 177, 49, 124, 110, 201,
    83, 233, 14, 109, 60, 253, 121, 184, 126, 121, 26, 138, 5, 214, 97,
    96, 216, 80],
    [61, 109, 78, 172, 255, 189, 67, 83, 247, 65, 234, 128, 30, 47,
    145, 70, 129, 26, 41, 41, 78, 4, 151, 230, 232, 127, 135, 230, 14,
    208, 178, 50]
   ]

                         Figure 23: mac-issuer-macs

   Concatenating the issuer protected header MAC with the array of
   payload MACs produces a single octet array that is signed using the
   issuer's stable key, resulting in the following signature:

   [120, 172, 15, 230, 138, 230, 150, 139, 241, 196, 79, 134, 122, 43,
   149, 11, 253, 104, 58, 199, 49, 87, 32, 64, 237, 50, 86, 155, 153,
   58, 63, 116, 245, 130, 136, 197, 164, 207, 232, 238, 106, 171, 246,
   98, 149, 254, 22, 1, 114, 187, 233, 168, 116, 173, 211, 208, 234,
   245, 76, 238, 143, 157, 83, 202]

                      Figure 24: mac-issuer-signature

   The original shared secret octet string is then concatenated to the
   end of the issuer signature octet string and the result is base64url-
   encoded as the issuer's proof value.

   The final issued JWP in JSON serialization is:

   {
     "payloads": [
       "IkRvZSI",
       "IkpheSI",
       "ImpheWRvZUBleGFtcGxlLm9yZyI",
       "NDI"
     ],
     "issuer": "eyJpc3MiOiJodHRwczovL2lzc3Vlci50bGQiLCJjbGFpbXMiOlsiZmF
     taWx5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZ2UiXSwidHlwIjoiSlBUI
     iwicGp3ayI6eyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im9CMVRQckVfUUp
     JTDYxZlVPT0s1RHBLZ2Q4ajJ6YlpKdHFwSUxEVEpYNkkiLCJ5IjoiM0pxbnJrdWNMb
     2JrZFJ1T3FaWE9QOU1NbGJGeWVuRk9MeUdsRy1GUEFDTSJ9LCJhbGciOiJNQUMtSDI
     1NiJ9",
     "proof": [
       "eKwP5ormlovxxE-GeiuVC_1oOscxVyBA7TJWm5k6P3T1gojFpM_o7mqr9mKV_hYB
       crvpqHSt09Dq9Uzuj51TymRtW7iLFGtWAfxWn3775AQjsUtgC82QvSpfh6prOmOO"
     ]
   }

                         Figure 25: mac-issued-jwp

   The same JWP in compact serialization:

   eyJpc3MiOiJodHRwczovL2lzc3Vlci50bGQiLCJjbGFpbXMiOlsiZmFtaWx5X25hbWUi
   LCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZ2UiXSwidHlwIjoiSlBUIiwicGp3ayI6eyJj
   cnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im9CMVRQckVfUUpJTDYxZlVPT0s1RHBL
   Z2Q4ajJ6YlpKdHFwSUxEVEpYNkkiLCJ5IjoiM0pxbnJrdWNMb2JrZFJ1T3FaWE9QOU1N
   bGJGeWVuRk9MeUdsRy1GUEFDTSJ9LCJhbGciOiJNQUMtSDI1NiJ9.IkRvZSI~IkpheSI
   ~ImpheWRvZUBleGFtcGxlLm9yZyI~NDI.eKwP5ormlovxxE-GeiuVC_1oOscxVyBA7TJ
   Wm5k6P3T1gojFpM_o7mqr9mKV_hYBcrvpqHSt09Dq9Uzuj51TymRtW7iLFGtWAfxWn37
   75AQjsUtgC82QvSpfh6prOmOO

                       Figure 26: mac-issued-compact

   Next, we show the presentation of the JWP with selective disclosure.

   We start with this presentation header using a nonce provided by the
   Verifier:

   {
     "nonce": "uTEB371l1pzWJl7afB0wi0HWUNk1Le-bComFLxa8K-s"
   }

                     Figure 27: mac-presentation-header

   When signed with the holder's presentation key, the resulting
   signature octets are:

   [126, 134, 175, 2, 165, 12, 103, 11, 116, 72, 94, 228, 240, 142,
   107, 195, 198, 238, 218, 203, 63, 198, 105, 175, 1, 69, 182, 5, 204,
   239, 35, 149, 85, 55, 4, 169, 109, 243, 88, 213, 12, 1, 167, 235,
   222, 17, 232, 118, 110, 111, 47, 165, 102, 142, 0, 1, 226, 117, 143,
   125, 132, 62, 231, 145]

                Figure 28: mac-presentation-header-signature

   Then by applying selective disclosure of only the given name and age
   claims (family name and email hidden, payload array indexes 0 and 2),
   the holder builds a mixed array of either the payload key (if
   disclosed) or MAC (if hidden):

   [
    [156, 53, 90, 125, 139, 226, 60, 168, 100, 220, 79, 255, 8, 87, 28,
    220, 237, 112, 161, 91, 39, 68, 137, 203, 92, 243, 16, 116, 64,
    129, 61, 172],
    [143, 172, 182, 156, 184, 138, 228, 172, 215, 26, 175, 137, 137,
    25, 159, 141, 213, 12, 214, 29, 231, 200, 13, 94, 116, 22, 41, 115,
    72, 214, 57, 98],
    [162, 174, 12, 27, 190, 250, 112, 1, 139, 177, 49, 124, 110, 201,
    83, 233, 14, 109, 60, 253, 121, 184, 126, 121, 26, 138, 5, 214, 97,
    96, 216, 80],
    [70, 55, 182, 105, 101, 130, 254, 234, 68, 224, 219, 97, 119, 98,
    244, 33, 43, 55, 148, 238, 225, 177, 101, 160, 49, 246, 109, 155,
    242, 236, 21, 138]
   ]

                    Figure 29: mac-presentation-keyormac

   The final presented proof value is generated by concatenating first
   the presentation header signature octet string, followed by the
   issuer signature octet string, then followed by the mixed array of
   keys and MACs:

   [126, 134, 175, 2, 165, 12, 103, 11, 116, 72, 94, 228, 240, 142,
   107, 195, 198, 238, 218, 203, 63, 198, 105, 175, 1, 69, 182, 5, 204,
   239, 35, 149, 85, 55, 4, 169, 109, 243, 88, 213, 12, 1, 167, 235,
   222, 17, 232, 118, 110, 111, 47, 165, 102, 142, 0, 1, 226, 117, 143,
   125, 132, 62, 231, 145, 120, 172, 15, 230, 138, 230, 150, 139, 241,
   196, 79, 134, 122, 43, 149, 11, 253, 104, 58, 199, 49, 87, 32, 64,
   237, 50, 86, 155, 153, 58, 63, 116, 245, 130, 136, 197, 164, 207,
   232, 238, 106, 171, 246, 98, 149, 254, 22, 1, 114, 187, 233, 168,
   116, 173, 211, 208, 234, 245, 76, 238, 143, 157, 83, 202, 156, 53,
   90, 125, 139, 226, 60, 168, 100, 220, 79, 255, 8, 87, 28, 220, 237,
   112, 161, 91, 39, 68, 137, 203, 92, 243, 16, 116, 64, 129, 61, 172,
   143, 172, 182, 156, 184, 138, 228, 172, 215, 26, 175, 137, 137, 25,
   159, 141, 213, 12, 214, 29, 231, 200, 13, 94, 116, 22, 41, 115, 72,
   214, 57, 98, 162, 174, 12, 27, 190, 250, 112, 1, 139, 177, 49, 124,
   110, 201, 83, 233, 14, 109, 60, 253, 121, 184, 126, 121, 26, 138, 5,
   214, 97, 96, 216, 80, 70, 55, 182, 105, 101, 130, 254, 234, 68, 224,
   219, 97, 119, 98, 244, 33, 43, 55, 148, 238, 225, 177, 101, 160, 49,
   246, 109, 155, 242, 236, 21, 138]

                     Figure 30: mac-presentation-proof

   The resulting presented JWP in JSON serialization is:

   {
     "payloads": [
       null,
       "IkpheSI",
       null,
       "NDI"
     ],
     "issuer": "eyJpc3MiOiJodHRwczovL2lzc3Vlci50bGQiLCJjbGFpbXMiOlsiZmF
     taWx5X25hbWUiLCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZ2UiXSwidHlwIjoiSlBUI
     iwicGp3ayI6eyJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im9CMVRQckVfUUp
     JTDYxZlVPT0s1RHBLZ2Q4ajJ6YlpKdHFwSUxEVEpYNkkiLCJ5IjoiM0pxbnJrdWNMb
     2JrZFJ1T3FaWE9QOU1NbGJGeWVuRk9MeUdsRy1GUEFDTSJ9LCJhbGciOiJNQUMtSDI
     1NiJ9",
     "proof": [
       "foavAqUMZwt0SF7k8I5rw8bu2ss_xmmvAUW2BczvI5VVNwSpbfNY1QwBp-veEeh2
       bm8vpWaOAAHidY99hD7nkXisD-aK5paL8cRPhnorlQv9aDrHMVcgQO0yVpuZOj909
       YKIxaTP6O5qq_Zilf4WAXK76ah0rdPQ6vVM7o-dU8qcNVp9i-I8qGTcT_8IVxzc7X
       ChWydEictc8xB0QIE9rI-stpy4iuSs1xqviYkZn43VDNYd58gNXnQWKXNI1jlioq4
       MG776cAGLsTF8bslT6Q5tPP15uH55GooF1mFg2FBGN7ZpZYL-6kTg22F3YvQhKzeU
       7uGxZaAx9m2b8uwVig"
     ],
     "presentation": "eyJub25jZSI6InVURUIzNzFsMXB6V0psN2FmQjB3aTBIV1VOaz
     FMZS1iQ29tRkx4YThLLXMifQ"
   }

                      Figure 31: mac-presentation-jwp

   The same JWP in compact serialization:

   eyJpc3MiOiJodHRwczovL2lzc3Vlci50bGQiLCJjbGFpbXMiOlsiZmFtaWx5X25hbWUi
   LCJnaXZlbl9uYW1lIiwiZW1haWwiLCJhZ2UiXSwidHlwIjoiSlBUIiwicGp3ayI6eyJj
   cnYiOiJQLTI1NiIsImt0eSI6IkVDIiwieCI6Im9CMVRQckVfUUpJTDYxZlVPT0s1RHBL
   Z2Q4ajJ6YlpKdHFwSUxEVEpYNkkiLCJ5IjoiM0pxbnJrdWNMb2JrZFJ1T3FaWE9QOU1N
   bGJGeWVuRk9MeUdsRy1GUEFDTSJ9LCJhbGciOiJNQUMtSDI1NiJ9.eyJub25jZSI6InV
   URUIzNzFsMXB6V0psN2FmQjB3aTBIV1VOazFMZS1iQ29tRkx4YThLLXMifQ.~IkpheSI
   ~~NDI.foavAqUMZwt0SF7k8I5rw8bu2ss_xmmvAUW2BczvI5VVNwSpbfNY1QwBp-veEe
   h2bm8vpWaOAAHidY99hD7nkXisD-aK5paL8cRPhnorlQv9aDrHMVcgQO0yVpuZOj909Y
   KIxaTP6O5qq_Zilf4WAXK76ah0rdPQ6vVM7o-dU8qcNVp9i-I8qGTcT_8IVxzc7XChWy
   dEictc8xB0QIE9rI-stpy4iuSs1xqviYkZn43VDNYd58gNXnQWKXNI1jlioq4MG776cA
   GLsTF8bslT6Q5tPP15uH55GooF1mFg2FBGN7ZpZYL-6kTg22F3YvQhKzeU7uGxZaAx9m
   2b8uwVig

                    Figure 32: mac-presentation-compact

Appendix B.  Acknowledgements

   This work was incubated in the DIF Applied Cryptography Working Group
   (https://identity.foundation/working-groups/crypto.html).

   We would like to thank Alberto Solavagione for his valuable
   contributions to this specification.

   The BBS examples were generated using the library at
   https://github.com/mattrglobal/pairing_crypto
   (https://github.com/mattrglobal/pairing_crypto) .

Appendix C.  Document History

   [[ To be removed from the final specification ]]

   *  Refactoring figures and examples to be built from a common set
      across all three documents

   *  Move single-use example appendix from JWP to JPA

   *  Change algorithm from BBS-DRAFT-5 to BBS, and from BBS-PROOF-
      DRAFT-5 to BBS-PROOF

   *  Update BBS ciphersuite ID to BBS_BLS12381G1_XMD:SHA-256_SSWU_RO_

   *  Update to draft 5 BLS key representations -03

   *  Improvements resulting from a full proofreading.

   *  Populated IANA Considerations section.

   *  Updated to use BBS draft -05.

   *  Updated examples.

   -02

   *  Add new BBS-DRAFT-3 and BBS-PROOF-DRAFT-3 algorithms based on
      draft-irtf-cfrg-bbs-signatures-03.
   *  Remove prior BBS-X algorithm based on a particular implementation
      of earlier drafts.

   -01

   *  Correct cross-references within group
   *  Describe issuer_header and presentation_header
   *  Update BBS references to CFRG drafts
   *  Rework reference to HMAC ( RFC2104 )
   *  Remove ZKSnark placeholder

   -00

   *  Created initial working group draft based on draft-jmiller-jose-
      json-proof-algorithms-01

Authors' Addresses

   Jeremie Miller
   Ping Identity
   Email: jmiller@pingidentity.com


   Michael B. Jones
   Self-Issued Consulting
   Email: michael_b_jones@hotmail.com
   URI:   https://self-issued.info/


   David Waite
   Ping Identity
   Email: dwaite+jwp@pingidentity.com
